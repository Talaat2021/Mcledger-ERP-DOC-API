{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Mcledger ERP API",
    "description" : "# Intoduction\n  The following apis are a simulation to the erp behaviour but via API requests\n # Authorization\n  ERP must have 2 params in the header `X-PREFIX` , `AUTH-TOKEN`\n      ERP use prefix to identifie any company so we first need to pass the prefix in the Header \n",
    "contact" : {
      "email" : "talaat.medhat@mcledger.co"
    },
    "version" : "1.0.0-oas3"
  },
  "servers" : [ {
    "url" : "http://104.248.161.120/ERP/modules/apiv2/",
    "description" : "staging server url"
  } ],
  "tags" : [ {
    "name" : "Company",
    "description" : "Company operations , create - update - list ..etc"
  }, {
    "name" : "Customers",
    "description" : "All the operation require to manipulate customer module"
  }, {
    "name" : "Customer Payment",
    "description" : "All the operation require to manipulate customer payment"
  }, {
    "name" : "Suppliers",
    "description" : "All the operation require to manipulate supplier module"
  }, {
    "name" : "Items",
    "description" : "All the operation require to manipulate Items module"
  }, {
    "name" : "Logger",
    "description" : "All the operation require to manipulate system log in ERP ( note this log only works with api requests and it logs in 2 level DB and file )"
  }, {
    "name" : "Sales",
    "description" : "All the operation require to manipulate sales module"
  }, {
    "name" : "Void",
    "description" : "Void Transaction is like deleteing one in ERP"
  }, {
    "name" : "Dashboard",
    "description" : "Some statistic apis"
  }, {
    "name" : "Settings",
    "description" : "getting ERP setting required by the api caller"
  }, {
    "name" : "PWP-REQUESTS",
    "description" : "it's a new table generated by us to track the rms operation , what we do here is update and retrieve from that table"
  }, {
    "name" : "Sales Pricing",
    "description" : "All the operation require to manipulate Sales Pricing module"
  }, {
    "name" : "Sales Order",
    "description" : "All the operation require to manipulate Sales Order module"
  }, {
    "name" : "Reports",
    "description" : "some modified reports in ERP and some reports just converted into api without modification"
  }, {
    "name" : "Modules",
    "description" : "Modules represent the ERP supported modules transaction like sales ,purchase ...etc"
  }, {
    "name" : "Salesman",
    "description" : "All the operation require to manipulate Salesman module"
  }, {
    "name" : "Customer Credit Note",
    "description" : "All the operation require to manipulate Customer Credit Note module"
  }, {
    "name" : "Purchase",
    "description" : "All the operation require to manipulate Purchase module"
  }, {
    "name" : "Delivery Note",
    "description" : "All the operation require to manipulate Delivery Note module"
  }, {
    "name" : "Accounts",
    "description" : "All the operation require to manipulate Accounts module"
  }, {
    "name" : "Sales Kit",
    "description" : "All the operation require to manipulate Sales Kit"
  }, {
    "name" : "Currency",
    "description" : "All the operation require to manipulate Currency"
  }, {
    "name" : "Depreciation",
    "description" : "Handle process depreciation for Fixed Assets"
  }, {
    "name" : "Amortization",
    "description" : "All actions related to manage Revenue/Cost Accruals"
  }, {
    "name" : "Fixed Assets",
    "description" : "Manage fixed asset items, along with items and fixed asset purchases"
  } ],
  "paths" : {
    "/company" : {
      "get" : {
        "tags" : [ "Company" ],
        "summary" : "Get Company Setup.",
        "description" : "get sales_types , fiscal years , current fiscal year",
        "operationId" : "companySetup",
        "responses" : {
          "200" : {
            "description" : "Get Company Basic Setups.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CompanySetup"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Company" ],
        "summary" : "Create New Company.",
        "description" : "create a new company in ERP , it's append the new credentials in config_db.php and create a new tables with the last prefix exist plus 1\n",
        "requestBody" : {
          "description" : "COMPANY BODY DATA",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Company"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created Successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Company"
                }
              }
            }
          },
          "412" : {
            "description" : "Invalid Inputs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/definitions/ErrorCreateCompany"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/templates" : {
      "get" : {
        "tags" : [ "Company" ],
        "summary" : "Get Company Sql Templates",
        "description" : "get company templates , templates that create the structure of a company",
        "operationId" : "companytemplates",
        "responses" : {
          "200" : {
            "description" : "Get ERP Supported Templates.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/ERPTemplates"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/invoice/state" : {
      "get" : {
        "tags" : [ "Company" ],
        "summary" : "Get Company Invoice State",
        "description" : "Get company Invoice state, 1 for enabled , 0 for disabled.",
        "operationId" : "companyInvoiceState",
        "responses" : {
          "200" : {
            "description" : "Get State Of Invoice App, if it supported in this company or not.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/InvoiceAppState"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/update" : {
      "post" : {
        "tags" : [ "Company" ],
        "summary" : "Update Company Templates id and color.",
        "description" : "update company template used to preview transactions and it's color",
        "operationId" : "updateCompany",
        "requestBody" : {
          "description" : "template_id and color",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CompanyUpdateData"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Update Company Data, things like color and invoice view template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/UpdateCompany"
                }
              }
            }
          },
          "412" : {
            "description" : "Invalid Data"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/all" : {
      "get" : {
        "tags" : [ "Company" ],
        "summary" : "Get All Companies.",
        "description" : "Get All Companies, name and prefix.",
        "operationId" : "allCompanies",
        "responses" : {
          "200" : {
            "description" : "Get company name and prefix.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/AllCompanies"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/invoice/state_multi" : {
      "post" : {
        "tags" : [ "Company" ],
        "summary" : "Update Invoice State In Multi Companies.",
        "description" : "Update invoice state enabled or disabled in multiple companies at once.",
        "operationId" : "updateMultiInvoiceState",
        "requestBody" : {
          "description" : "Group of Company Prefixes.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CompanyUpdateMultiInvoiceState"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Response of updating invoice state in multiple companies all at once.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CompanyUpdateMultiInvoiceState"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/expenses/state" : {
      "get" : {
        "tags" : [ "Company" ],
        "summary" : "Get Company Expenses State.",
        "description" : "Get company expenses state, 1 for enabled , 0 for disabled.",
        "operationId" : "companyExpensesState",
        "responses" : {
          "200" : {
            "description" : "Get State Of Expenses, if it supported in this company or not.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/InvoiceAppState"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/inventory-valuation/state" : {
      "get" : {
        "tags" : [ "Company" ],
        "summary" : "Show Inventory Valuation State.",
        "description" : "Get Inventory Valuation State, 1 for enabled , 0 for disabled.",
        "operationId" : "companyValuationState",
        "responses" : {
          "200" : {
            "description" : "Get State Of Inventory Valuation, if it supported in this company or not.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/InvoiceAppState"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/invoice/reminders" : {
      "get" : {
        "tags" : [ "Company" ],
        "summary" : "Get Invoice Reminders.",
        "description" : "Get Invoice Reminders",
        "operationId" : "companyInvoiceReminders",
        "responses" : {
          "200" : {
            "description" : "Response of the invoices reminders",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/InvoiceAppState"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/validate-reference" : {
      "get" : {
        "tags" : [ "Company" ],
        "summary" : "Validate Reference To Specific Transaction Type And Specific Transaction Number.",
        "description" : "Validate reference for transaction with specific type and number.",
        "operationId" : "companyValidateReference",
        "parameters" : [ {
          "name" : "ref",
          "in" : "query",
          "description" : "reference to be tested",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "002/1220"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Transaction Type, for example 10 for sales invoice.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "trans_no",
          "in" : "query",
          "description" : "Transaction Number.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 214
        } ],
        "responses" : {
          "200" : {
            "description" : "Response if the reference is valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CompanyValidReference"
                }
              }
            }
          },
          "412" : {
            "description" : "Invalid Reference Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CompanyInvalidReference"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/company/invoice/reminders/settings" : {
      "post" : {
        "tags" : [ "Company" ],
        "summary" : "Update Invoice Reminders Settings.",
        "description" : "Update invoice reminders settings, hours reminder first and second date...",
        "operationId" : "updateInvoiceRemindersSettings",
        "requestBody" : {
          "description" : "Invoice Reminder Settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CompanyReminderSettings"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Response of updating invoice reminder settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/InvoiceReminderSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/InvoiceReminderNotActive"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/customers" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get All Customers.",
        "description" : "Get list of the customers.",
        "operationId" : "getCustomers",
        "parameters" : [ {
          "name" : "keyword",
          "in" : "query",
          "description" : "filter by one of Keyword values (debtor_no,customer name, address, company name, customer email, customer phone)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 102
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "pagination value , compine with limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "how many each page should support",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "sort by specific column in customers table for example debtor_no",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Customer List Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CustomersList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Add New Customer With Default Branch.",
        "description" : "Add new customer with default branch",
        "operationId" : "addCustomer",
        "requestBody" : {
          "description" : "name and address  , ...etc",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Customer Response After Success Creation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreateCustomer"
                }
              }
            }
          },
          "412" : {
            "description" : "Precondition failed while insert new customer.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/FailedCreateCustomer"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/customers/{customer_id}" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Show Customer.",
        "description" : "Show customer details.",
        "operationId" : "getCustomer",
        "parameters" : [ {
          "name" : "customer_id",
          "in" : "path",
          "description" : "debtor_no in the db",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 112
        } ],
        "responses" : {
          "200" : {
            "description" : "Customer Details Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/ShowCustomer"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Customers" ],
        "summary" : "Update Customer",
        "description" : "update customer data",
        "operationId" : "updateCustomer",
        "parameters" : [ {
          "name" : "customer_id",
          "in" : "path",
          "description" : "debtor_no in the db",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 112
        } ],
        "requestBody" : {
          "description" : "customer data body",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated Customer Details Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/ShowCustomer"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/customers/{customer_id}/invoices" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get All Customer Invoices.",
        "description" : "get sales invoices created for this customer with it's allocations (customer payments)",
        "operationId" : "getCustomerInvoices",
        "parameters" : [ {
          "name" : "customer_id",
          "in" : "path",
          "description" : "debtor_no in the db",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 109
        } ],
        "responses" : {
          "200" : {
            "description" : "sales invoices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CustomerInvoices"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/customers/names" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get All Customers Names.",
        "description" : "Get customers names with reference (company Name)",
        "operationId" : "getCustomerNames",
        "responses" : {
          "200" : {
            "description" : "Customer Names List Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CustomerNames"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/customers/multi" : {
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Add Multiple Customers.",
        "description" : "Add new customers, this api used mainly by shopify",
        "operationId" : "addMultiCustomers",
        "requestBody" : {
          "description" : "Multiple Customers",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerMulti"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Customer Response After Success Creation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreateMultiCustomer"
                }
              }
            }
          },
          "412" : {
            "description" : "Precondition failed while insert new customer.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/FailedCreateCustomer"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/customers/allocations" : {
      "get" : {
        "tags" : [ "Customer Payment", "Customer Credit Note" ],
        "summary" : "Get all Customer Payments.",
        "description" : "get all the customer payments  , it's also retrieve the Credit Notes with it depend on type parameter",
        "operationId" : "getCustomerPayments",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "pagination value , compine with limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "how many each page should support",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyword",
          "in" : "query",
          "description" : "search value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "tmt"
        }, {
          "name" : "tran_date_from",
          "in" : "query",
          "description" : "from transaction date of the customer payment",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "tran_date_to",
          "in" : "query",
          "description" : "to transaction date of the customer payment",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "type of the transaction 11 => credit note  12 => customer payment",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 11
        }, {
          "name" : "item_id",
          "in" : "query",
          "description" : "filter by item , item_id here represent the stock_id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Customer Payments Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CustomerPayments"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales/receipt/{payment_no}" : {
      "get" : {
        "tags" : [ "Customer Payment" ],
        "summary" : "Show Customer Payment",
        "description" : "view specific customer payment",
        "operationId" : "showCustomerPayment",
        "parameters" : [ {
          "name" : "payment_no",
          "in" : "path",
          "description" : "payment_no represent the trans_no (in DB) of the customer payment",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 98
        } ],
        "responses" : {
          "200" : {
            "description" : "Customer Payment Details Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CustomerPaymentsDetails"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales/print/receipt/{payment_no}" : {
      "get" : {
        "tags" : [ "Customer Payment" ],
        "summary" : "Print Receipt Template.",
        "description" : "This api return an html view wit receipt data without any body just html",
        "operationId" : "printReceipt",
        "parameters" : [ {
          "name" : "payment_no",
          "in" : "path",
          "description" : "payment_no represents the trans_no (in DB) of the customer payment",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 107
        } ],
        "responses" : {
          "200" : {
            "description" : "Response must be an html."
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales/customer_payment/reference/get" : {
      "get" : {
        "tags" : [ "Customer Payment" ],
        "summary" : "Get next available customer payment reference.",
        "description" : "Get the next unique reference to insert new customer payment with",
        "operationId" : "getCustomerNextPaymentReference",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CustomerPaymentsReference"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales/customer_payment" : {
      "post" : {
        "tags" : [ "Customer Payment" ],
        "summary" : "Add New Customer Payment",
        "description" : "Create New Customer payment , take care in this api we can do both create customer payment and allocate to sales invoices , if we would like",
        "operationId" : "addCustomerPayment",
        "requestBody" : {
          "description" : "payment details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewCustomerPayment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Customer Payment Creation Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreateCustomerPayments"
                }
              }
            }
          },
          "412" : {
            "description" : "Precondition Failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/FailedCustomerPayment"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales/allocate-customer" : {
      "post" : {
        "tags" : [ "Customer Payment", "Customer Credit Note" ],
        "summary" : "Allocate amounts from customer payment/credit note to invoice.",
        "description" : "Allocate amounts from customer payments/credit note to 1 invoice or multiple invoices",
        "operationId" : "allocateCustomerPayment",
        "requestBody" : {
          "description" : "Allocate payment details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AllocateCustomerPayment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Allocate Customer Payment Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/AllocateCustomerPayment"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/customers/refund/{payment_no}" : {
      "post" : {
        "tags" : [ "Customer Payment" ],
        "summary" : "Refund Customer Payment.",
        "description" : "Refund Customer Payment.",
        "operationId" : "refundCustomerPayment",
        "parameters" : [ {
          "name" : "payment_no",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 45
        } ],
        "requestBody" : {
          "description" : "Allocate payment details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RefundCustomerPayment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Allocate Customer Payment Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/RefundCustomerPayment"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/suppliers" : {
      "get" : {
        "tags" : [ "Suppliers" ],
        "summary" : "Get all suppliers",
        "description" : "Return list of available suppliers",
        "operationId" : "getSuppliers",
        "parameters" : [ {
          "name" : "order",
          "in" : "query",
          "description" : "order by DESC or ASCE  with supplier id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "pagination value , compine with limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "how many each page should support",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get suppliers response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SuppliersList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Suppliers" ],
        "summary" : "Add New Supplier",
        "description" : "add new supplier",
        "operationId" : "addSupplier",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Supplier"
        },
        "responses" : {
          "201" : {
            "description" : "Created Successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Supplier"
                }
              }
            }
          },
          "412" : {
            "description" : "invalid data"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/suppliers/{supplier_id}" : {
      "get" : {
        "tags" : [ "Suppliers" ],
        "summary" : "View Single Supplier",
        "description" : "View Supplier by id",
        "operationId" : "showSupplier",
        "parameters" : [ {
          "name" : "supplier_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : 292
        } ],
        "responses" : {
          "200" : {
            "description" : "Get supplier details response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SuppliersList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Suppliers" ],
        "summary" : "Update Supplier",
        "description" : "Update Supplier you need to add person_id with it's person id to update him",
        "operationId" : "updateSupplier",
        "parameters" : [ {
          "name" : "supplier_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : 292
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Supplier"
        },
        "responses" : {
          "200" : {
            "description" : "Updated Successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Supplier"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/inventory" : {
      "get" : {
        "tags" : [ "Items" ],
        "summary" : "Get Items List normal and fixed assets.",
        "description" : "Return all the items supported for the company.",
        "operationId" : "getItems",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "To identify type of returned items all/items/fixed_assets",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "order by DESC or ASC  with supplier id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "category_id",
          "in" : "query",
          "description" : "filter by category",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "pagination value , compine with limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "how many each page should support",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Items List Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/ItemsList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Items" ],
        "summary" : "Create New Item / Fixed asstes",
        "description" : "Create New Item for sales/purchase, or create a fixed asset items",
        "operationId" : "addItem",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Item"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Item Created Successfully Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreateItems"
                }
              }
            }
          },
          "412" : {
            "description" : "Precondition Failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/FailedCreateItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/inventory/{stock_id}" : {
      "get" : {
        "tags" : [ "Items" ],
        "summary" : "Show Item Details.",
        "description" : "Return item details",
        "operationId" : "getItem",
        "parameters" : [ {
          "name" : "stock_id",
          "in" : "path",
          "description" : "item details",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : 411110
        } ],
        "responses" : {
          "200" : {
            "description" : "Items List Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemDetails"
                }
              }
            }
          },
          "412" : {
            "description" : "invalid data"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Items" ],
        "summary" : "Update Item",
        "description" : "Update Item",
        "operationId" : "updateItem",
        "parameters" : [ {
          "name" : "stock_id",
          "in" : "path",
          "description" : "update item details",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : 411110
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Items List Updated Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemDetails"
                }
              }
            }
          },
          "412" : {
            "description" : "Precondition Failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/FailedCreateItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/inventory/item-tax-types" : {
      "get" : {
        "tags" : [ "Items" ],
        "summary" : "Get System Item Tax Types.",
        "description" : "Return all the item tax types.",
        "operationId" : "getItemTaxTypes",
        "responses" : {
          "200" : {
            "description" : "Items List Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/ItemTaxTypes"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/inventory/multi" : {
      "post" : {
        "tags" : [ "Items" ],
        "summary" : "Create Multiple Items.",
        "description" : "Create Multiple Items At Once.",
        "operationId" : "addMultiItems",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemMulti"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Item Created Successfully Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreateItems"
                }
              }
            }
          },
          "412" : {
            "description" : "Precondition Failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/FailedCreateItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/inventory/edit-Multi" : {
      "put" : {
        "tags" : [ "Items" ],
        "summary" : "Update Multiple Items.",
        "description" : "Update Multiple Items At Once.",
        "operationId" : "updateMultiItems",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateMultiItem"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Item Updated Successfully Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreateItems"
                }
              }
            }
          },
          "412" : {
            "description" : "Precondition Failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/FailedCreateItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/log" : {
      "get" : {
        "tags" : [ "Logger" ],
        "summary" : "Show Logs.",
        "description" : "show logs on the api level only , any transaction made by api would be logged in the db table so we can retrieve it",
        "operationId" : "getLogs",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "pagination value , compine with limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "how many each page should support",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "user_id",
          "in" : "query",
          "description" : "filter by user",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "trans_no",
          "in" : "query",
          "description" : "filter by transaction number  , it will return all the logs happend on that trans",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "trans_type",
          "in" : "query",
          "description" : "filter by transaction type , sales , purchase ..etc",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "user_email",
          "in" : "query",
          "description" : "filter by user email",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "filter by action ( GET , POST , PUT , DELETE )",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attempt",
          "in" : "query",
          "description" : "failed transaction or success one  ( 0 | 1)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "action_timestamp_from",
          "in" : "query",
          "description" : "the timestamp of the action from range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "action_timestamp_to",
          "in" : "query",
          "description" : "the timestamp of the action to range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "data"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/Logs"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales/10" : {
      "get" : {
        "tags" : [ "Sales" ],
        "summary" : "Get all sales invoices.",
        "description" : "get all sales invoices.",
        "operationId" : "getSalesInvoices",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "pagination value , combine with limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "how many each page should support",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyword",
          "in" : "query",
          "description" : "search value , search in customer name , reference , branch",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "tmt negm"
        }, {
          "name" : "customer_id",
          "in" : "query",
          "description" : "filter by customer that sales invoices created for",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "paid",
          "in" : "query",
          "description" : "filter by paid value (all=>all invoice status,0 =>unpaid,1=>paid,2=>credit,3=>overdue,)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : "all"
        }, {
          "name" : "item_id",
          "in" : "query",
          "description" : "filter by invoice items",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "tran_date_from",
          "in" : "query",
          "description" : "invoice transaction date from range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "tran_date_to",
          "in" : "query",
          "description" : "transaction invoice date to range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "data"
          }
        }, {
          "name" : "due_date_from",
          "in" : "query",
          "description" : "the invoice from due date if it's not prepaid",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "due_date_to",
          "in" : "query",
          "description" : "the invoice to due date if it's not prepaid",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "data"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Invoice Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SalesInvoiceList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales/{trans_no}/10" : {
      "get" : {
        "tags" : [ "Sales" ],
        "summary" : "Show Sales Invoice.",
        "description" : "Show sales invoice details.",
        "operationId" : "getSalesInvoice",
        "parameters" : [ {
          "name" : "trans_no",
          "in" : "path",
          "description" : "the invoice to due date if it's not prepaid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 114
        } ],
        "responses" : {
          "200" : {
            "description" : "Invoice Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SalesInvoiceList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales/print_preview/{trans_no}" : {
      "get" : {
        "tags" : [ "Sales" ],
        "summary" : "Print Sales Invoice As HTML.",
        "description" : "Return html of the printed invoice , only html without body",
        "operationId" : "printSalesInvoice",
        "parameters" : [ {
          "name" : "trans_no",
          "in" : "path",
          "description" : "the invoice to due date if it's not prepaid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 128
        }, {
          "name" : "template_id",
          "in" : "query",
          "description" : "we support 3 templates with 3 ids each one has a defierent design",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "The response is in a form of HTML."
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales" : {
      "post" : {
        "tags" : [ "Sales" ],
        "summary" : "Create New Sales Invoice.",
        "description" : "Responsible of sales invoice creation",
        "operationId" : "createSalesInvoice",
        "requestBody" : {
          "description" : "Invoice creation data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SalesInvoice"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Sales Invoice Created Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesInvoice"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/salescontrol/auto-sales-invoice" : {
      "post" : {
        "tags" : [ "Sales" ],
        "summary" : "Create a sales invoice by robo accountant",
        "description" : "the main aim of this api is to create transaction in ERP using OCR process on request in rms",
        "operationId" : "roboSalesInvoice",
        "requestBody" : {
          "description" : "Robo Invoice creation data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoboSalesInvoice"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Auto SalesInvoice Created Response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesInvoice"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/void" : {
      "post" : {
        "tags" : [ "Void" ],
        "summary" : "void transaction",
        "description" : "the main aim of this api is to void (delete) specific transaction",
        "operationId" : "voidTransaction",
        "requestBody" : {
          "description" : "void transaction",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VoidTransaction"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/Void"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/void/is-voided" : {
      "post" : {
        "tags" : [ "Void" ],
        "summary" : "Is Transaction Voided ?",
        "description" : "check if group of transactions voided or not",
        "operationId" : "isTransVoided",
        "requestBody" : {
          "description" : "Robo Invoice creation data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/isTransactionVoided"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/Void"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/salescontrol/sales-order" : {
      "post" : {
        "tags" : [ "Sales Order" ],
        "summary" : "Create Sales Order",
        "description" : "create sales order",
        "operationId" : "createSalesOrder",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SalesOrder"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesInvoice"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/salescontrol/sales-orders" : {
      "get" : {
        "tags" : [ "Sales Order" ],
        "summary" : "Get all sales orders",
        "description" : "get all sales orders with type 30",
        "operationId" : "getSalesOrders",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "pagination value , combine with limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "how many each page should support",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyword",
          "in" : "query",
          "description" : "search value , search in customer name , reference , branch",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customer_id",
          "in" : "query",
          "description" : "filter by customer that sales invoices created for",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "item_id",
          "in" : "query",
          "description" : "filter by invoice items",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "order_date_from",
          "in" : "query",
          "description" : "invoice transaction date from range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "order_date_to",
          "in" : "query",
          "description" : "transaction invoice date to range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "data"
          }
        }, {
          "name" : "delivery_date_from",
          "in" : "query",
          "description" : "the invoice from due date if it's not prepaid",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "delivery_date_to",
          "in" : "query",
          "description" : "the invoice to due date if it's not prepaid",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "data"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SalesInvoiceList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/salescontrol/sales-order/{trans_no}" : {
      "get" : {
        "tags" : [ "Sales Order" ],
        "summary" : "show sales orders",
        "description" : "get all sales orders with type 30",
        "operationId" : "showSalesOrder",
        "parameters" : [ {
          "name" : "trans_no",
          "in" : "path",
          "description" : "order number",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SalesInvoiceList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Sales Order" ],
        "summary" : "update sales order",
        "description" : "update sales order",
        "operationId" : "updateSalesOrder",
        "parameters" : [ {
          "name" : "trans_no",
          "in" : "path",
          "description" : "order number",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 136
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSalesOrder"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesInvoice"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Sales Order" ],
        "summary" : "cancel sales order",
        "description" : "cancel sales order is like deleting it",
        "operationId" : "cancelSalesOrder",
        "parameters" : [ {
          "name" : "trans_no",
          "in" : "path",
          "description" : "order number",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 136
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/DeleteSalesOrder"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/salescontrol/sales-order/print-preview/{trans_no}" : {
      "get" : {
        "tags" : [ "Sales Order" ],
        "summary" : "Print Sales Order",
        "description" : "return html of the sales order , depend on tempate_id default value for template_id = 1",
        "operationId" : "printSalesOrder",
        "parameters" : [ {
          "name" : "template_id",
          "in" : "query",
          "description" : "sales order support 3 templates , from 1 - 3",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "trans_no",
          "in" : "path",
          "description" : "order number",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/salescontrol/sales-order/invoice/{trans_no}" : {
      "post" : {
        "tags" : [ "Sales Order" ],
        "summary" : "Invoice Sales Order",
        "description" : "transfer sales order to sales invoice , there's step in the middle tarnsfer sales order -> delivery note -> sales invoice , but we implicity do the second step",
        "operationId" : "invoiceSalesOrder",
        "parameters" : [ {
          "name" : "trans_no",
          "in" : "path",
          "description" : "order number",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 135
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/InvoiceSalesOrder"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/dashboard" : {
      "get" : {
        "tags" : [ "Dashboard" ],
        "summary" : "Get Dashboard Report.",
        "description" : "get top customers/suppliers/gl/receipts/sales/purchase ..etc",
        "operationId" : "getDashboard",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/Dashboard"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/dashboard/tags-balances" : {
      "get" : {
        "tags" : [ "Dashboard" ],
        "summary" : "Get Tags Balance",
        "description" : "get tags balance report , this api need procuder to run",
        "operationId" : "getTagsBalance",
        "parameters" : [ {
          "name" : "company_prefix",
          "in" : "query",
          "description" : "company prefix  , i have no idea why we pass the company prefix in query param it's already exist in the header.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 661
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/dashboard/tags-summary-balances" : {
      "get" : {
        "tags" : [ "Dashboard" ],
        "summary" : "Get Summary Balance",
        "description" : "get tags balance report , this api need mysql procuder to run",
        "operationId" : "getSummaryBalance",
        "parameters" : [ {
          "name" : "company_prefix",
          "in" : "query",
          "description" : "company prefix  , i have no idea why we pass the company prefix in query param it's already exist in the header.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/dashboard/tags-top-expenses" : {
      "get" : {
        "tags" : [ "Dashboard" ],
        "summary" : "Get Top Expenses",
        "description" : "get Top Expenses report , this api need mysql procuder to run",
        "operationId" : "getTopExpenses",
        "parameters" : [ {
          "name" : "company_prefix",
          "in" : "query",
          "description" : "company prefix  , i have no idea why we pass the company prefix in query param it's already exist in the header.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/dashboard/tags-revenue-expenses" : {
      "get" : {
        "tags" : [ "Dashboard" ],
        "summary" : "Get Revenue Expenses",
        "description" : "get Top Expenses report , this api need mysql procuder to run",
        "operationId" : "getRevenueExpenses",
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/inventory/generalsettings" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Get General Settings",
        "description" : "get settings of ERP , like tax types , accounts , any thing that needed in a form",
        "operationId" : "getGeneralSettings",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/Generalsettings"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/zatca" : {
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "Generate ZATCA QR Code.",
        "description" : "Get ZATCA QR code as a data image",
        "operationId" : "getZATCAQR",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ZATCARequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/ZATCA"
                }
              }
            }
          }
        },
        "security" : [ {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/pwp-request" : {
      "get" : {
        "tags" : [ "PWP-REQUESTS" ],
        "summary" : "Get PWP Requests.",
        "description" : "pwp requests is a table that tied ub the audit trail id with rms request and items , this api take a request_no and retrieve it from the pwp request if it exist",
        "operationId" : "getPWPRequests",
        "parameters" : [ {
          "name" : "request_no",
          "in" : "query",
          "description" : "request number of the rms requests , that we need to fetch",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 58
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/PWPRequests"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/pwp-request/{item_no}" : {
      "put" : {
        "tags" : [ "PWP-REQUESTS" ],
        "summary" : "update PWP requests.",
        "description" : "pwp requests is a table that tied ub the audit trail id with rms request and items , this api update pwp requests fields",
        "operationId" : "updatePWPRequests",
        "parameters" : [ {
          "name" : "item_no",
          "in" : "path",
          "description" : "item no of the rms , that we need to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 58
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePWPRequests"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/UpdatePWPRequests"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales-pricing" : {
      "post" : {
        "tags" : [ "Sales Pricing" ],
        "summary" : "Create Sales Pricing.",
        "description" : "sales pricing of specific item",
        "operationId" : "createSalesPricing",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSalesPricing"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SalesPricing"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales-pricing/{id}" : {
      "put" : {
        "tags" : [ "Sales Pricing" ],
        "summary" : "Update Sales Pricing.",
        "description" : "update sales pricing of specific item",
        "operationId" : "updateSalesPricing",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSalesPricing"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/UpdateSalesPricing"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/reporting/vat-return" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Vat Return Report.",
        "description" : "return vat return",
        "operationId" : "vatReturnReport",
        "parameters" : [ {
          "name" : "from_date",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-07-1"
        }, {
          "name" : "to_date",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-09-30"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/VatReturnReport"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/salescontrol/total/report" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Total Paid/Unpaid invoices report.",
        "description" : "total paid and unpaid invoices report",
        "operationId" : "totalPaidUnpaidReports",
        "parameters" : [ {
          "name" : "from_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "to_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/TotalPaidReport"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/reporting/balance-sheet" : {
      "post" : {
        "tags" : [ "Reports" ],
        "summary" : "Balance Sheet.",
        "description" : "Balance Sheet Report",
        "operationId" : "balanceSheet",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/VatReturnReport"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/reporting/profit-loss" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Profit & Loss.",
        "description" : "Profit & Loss report",
        "operationId" : "profitLoss",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/report/account-statement" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Account Statment Report",
        "description" : "Account statment report , api takes from/to date and the account number we want to get it's statment",
        "operationId" : "accountStatment",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "account",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/VatReturnReport"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/report/aged-customer" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Aged Customer Analysis.",
        "description" : "Aged Customer Analysis Report",
        "operationId" : "agedCustomerAnalysis",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/VatReturnReport"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/report/aged-supplier" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Aged Supplier Analysis",
        "description" : "Aged Supplier Analysis Report",
        "operationId" : "agedSupplierAnalysis",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/VatReturnReport"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/report/sales" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Sales Report",
        "description" : "Sales Report , report for all the sales module , sales order/invoice , delivery note ...etc , with the following supported filters in the query param",
        "operationId" : "salesReport",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "item_id",
          "in" : "query",
          "description" : "stock_id of the items table",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trans_type",
          "in" : "query",
          "description" : "transaction type , could be sales invoice (10) , sales order (30) , credit note (11) , customer payment (12)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customer_id",
          "in" : "query",
          "description" : "filter by customer id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/VatReturnReport"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/report/purchase" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Purchase Report",
        "description" : "Purchase Report",
        "operationId" : "purchaseReport",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/VatReturnReport"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/report/detailed-expense" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Detailed Expenses Report.",
        "description" : "Detailed Expenses Report.",
        "operationId" : "detailedExpensesReport",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/VatReturnReport"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/report/detailed-balance" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Detailed Balance Report",
        "description" : "Detailed Balance Report",
        "operationId" : "detailedBalanceReport",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/VatReturnReport"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/module/non-gl/{trans_type}" : {
      "get" : {
        "tags" : [ "Modules" ],
        "summary" : "Search For specific transaction type in non gl modules",
        "description" : "It's looking for the provided transaction in a json file contains all the non gl modules , the non gl modules is the modules that will not be populated to the rms",
        "operationId" : "searchNonGlModules",
        "parameters" : [ {
          "name" : "trans_type",
          "in" : "path",
          "description" : "transaction type of the non gl module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 30
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/AddNonGlModule"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Modules" ],
        "summary" : "Search For specific transaction type in non gl modules",
        "description" : "delete non gl module , delete a transaction type in the json file (NonGlModules.json) so the target trans type will  be populated in rms , NonGlModules.json need to have a permission 0644 or 0777s",
        "operationId" : "deleteNonGlModule",
        "parameters" : [ {
          "name" : "trans_type",
          "in" : "path",
          "description" : "transaction type of the non gl module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 30
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/DeleteNonGlModule"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/module/non-gl" : {
      "get" : {
        "tags" : [ "Modules" ],
        "summary" : "Get All Non gl modules",
        "description" : "retrieve all the non gl modules , the non gl modules is the modules that will not be populated to the rms",
        "operationId" : "getAllNonGlModules",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NonGLModuleType"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Modules" ],
        "summary" : "Add Non Gl Module",
        "description" : "add non gl module , insert a transaction type in the json file (NonGlModules.json) so the target trans type won't be populated in rms , NonGlModules.json need to have a permission 0644 or 0777",
        "operationId" : "addNonGlModule",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NonGLModuleType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/AddNonGlModule"
                }
              }
            }
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/module/" : {
      "get" : {
        "tags" : [ "Modules" ],
        "summary" : "Get all supported Modules from FA",
        "description" : "get all the supported modules in ERP , with it's links in ERP also with it's transaction type , some modules doesn't have so we create a custom number for it , like items/customers/...etc",
        "operationId" : "getModules",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/Modules"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/salesman/" : {
      "get" : {
        "tags" : [ "Salesman" ],
        "summary" : "Get all salesmans with there reports.",
        "description" : "get all salesman with a total report of sales and purchase of each one of them did in a specific date, note -> salesman tied ub with branch and branch tied up with customer",
        "operationId" : "getSalesman",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "from_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "to_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "keyword",
          "in" : "query",
          "description" : "search param in salesman code/name/phone/email",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Bilal"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/Salesman"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Salesman" ],
        "summary" : "Create Salesman.",
        "description" : "add a new salesman , note -> salesman tied ub with branch and branch tied up with customer",
        "operationId" : "createSalesman",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Salesman"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreateSalesman"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/salesman/{id}" : {
      "get" : {
        "tags" : [ "Salesman" ],
        "summary" : "Show Salesman with it's reports",
        "description" : "show salesman details with a total report of sales and purchase of each one of them did in a specific date",
        "operationId" : "showSalesman",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "salesman id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 2
        }, {
          "name" : "from_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "to_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SalesmanDetails"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Salesman" ],
        "summary" : "Update Salesman.",
        "description" : "update salesman , note -> salesman tied ub with branch and branch tied up with customer",
        "operationId" : "updateSalesman",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "salesman id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 2
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSalesman"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/UpdateSalesman"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/credit-note" : {
      "get" : {
        "tags" : [ "Customer Credit Note" ],
        "summary" : "Get ll credit notes",
        "description" : "get all credit notes with type 11 , credit notes is something like getting a sales invoice back",
        "operationId" : "getallCreditNotes",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "from_date",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "item_id",
          "in" : "query",
          "description" : "stock_id of the items table",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SalesInvoiceList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Customer Credit Note" ],
        "summary" : "Create Credit Note",
        "description" : "add a new credit note",
        "operationId" : "createCreditNote",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SalesInvoice"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesInvoiceDetails"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales/{trans_no}/11" : {
      "get" : {
        "tags" : [ "Customer Credit Note" ],
        "summary" : "Show Credit Note",
        "description" : "Show customer credit note details",
        "operationId" : "getCustomerCreditNote",
        "parameters" : [ {
          "name" : "trans_no",
          "in" : "path",
          "description" : "the invoice to due date if it's not prepaid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 44
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesInvoiceDetails"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/credit-note/credit-sales/{invoice_no}" : {
      "post" : {
        "tags" : [ "Customer Credit Note" ],
        "summary" : "Create Credit Note",
        "description" : "add a new credit note",
        "operationId" : "credit invoice",
        "parameters" : [ {
          "name" : "invoice_no",
          "in" : "path",
          "description" : "invoice number",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 119
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditThis"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesInvoiceDetails"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/delivery-note" : {
      "get" : {
        "tags" : [ "Delivery Note" ],
        "summary" : "Show All Delivery Notes.",
        "description" : "get all delivery notes",
        "operationId" : "getDeliveryNotes",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "can_invoice",
          "in" : "query",
          "description" : "filter by the ability to invoice the develiery notes",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/SalesInvoiceList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/delivery-note/print-preview/{delivery_no}" : {
      "get" : {
        "tags" : [ "Delivery Note" ],
        "summary" : "Print Deliviery note.",
        "description" : "print delivery notes , the response will be a form of html wihtout any body or code",
        "operationId" : "printDeliveryNote",
        "parameters" : [ {
          "name" : "template_id",
          "in" : "query",
          "description" : "ERP has 3 templates supported to print any kind of transaction , 1 is the default one",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 1
        }, {
          "name" : "delivery_no",
          "in" : "path",
          "description" : "delivery number",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 112
        } ],
        "responses" : {
          "200" : {
            "description" : "HTML Response"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/account" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Show All Accounts.",
        "description" : "Get all accounts",
        "operationId" : "getAccounts",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/BankAccounts"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/user" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Create user",
        "description" : "Create user in all companies in ERP , accountant user some one who will use the system with specific rules , this api generate sql only if you would like and can also execute it internal and give you the output ,  it also update the user data if he exist",
        "operationId" : "createUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "SQL query for creating"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/purchase" : {
      "get" : {
        "tags" : [ "Purchase" ],
        "summary" : "Get Purchases Invoices.",
        "description" : "Get list of purchases invoices.",
        "operationId" : "getPurchases",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "pagination value , combine with limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "how many each page should support",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyword",
          "in" : "query",
          "description" : "search value , search in customer name , reference , branch",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "supplier_id",
          "in" : "query",
          "description" : "filter by supplier id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "from_date",
          "in" : "query",
          "description" : "Filter with from date",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "to_date",
          "in" : "query",
          "description" : "Filter with to date",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter with Purchase type -> invoices or orders",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "invoices"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter with Purchase status -> all is default",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of purchases invoices.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/PurchaseList"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Purchase" ],
        "summary" : "Add Direct Purchase.",
        "description" : "create new supplier invoice , this api also support robo supplier invoice, or add Fixed Assets Purchase Invoice, just retreive fixed asset items and nothing changed in passed request body",
        "operationId" : "addPurchase",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Purchase"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreatePurchase"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/purchase/order" : {
      "post" : {
        "tags" : [ "Purchase" ],
        "summary" : "Add Purchase Order.",
        "description" : "Create new pruchase order",
        "operationId" : "addPurchaseOrder",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Purchase"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreatePurchase"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/purchase/invoice" : {
      "post" : {
        "tags" : [ "Purchase" ],
        "summary" : "Add Purchase Invoice.",
        "description" : "Create new purchase invoice not direct invoice.",
        "operationId" : "addPurchaseExpense.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Purchase"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreatePurchase"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/credit-note-supp" : {
      "post" : {
        "tags" : [ "Purchase" ],
        "summary" : "Create Purchase Credit Note.",
        "description" : "Create purchase credit note.",
        "operationId" : "addPurchaseCreditNote.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Purchase"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreatePurchase"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/purchase/print-preview/{trans_no}" : {
      "get" : {
        "tags" : [ "Purchase" ],
        "summary" : "Print Purchase Invoice.",
        "description" : "Print Purchase Invoice As HTML",
        "operationId" : "printPurchaseInvoice.",
        "parameters" : [ {
          "name" : "trans_no",
          "in" : "path",
          "description" : "Purchase transaction number.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "HTML Response."
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales_kit/" : {
      "post" : {
        "tags" : [ "Sales Kit" ],
        "summary" : "Create Sales Kit.",
        "description" : "Create Sales Kit.",
        "operationId" : "createSalesKit",
        "requestBody" : {
          "description" : "Sales Kit Request Body.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SalesKit"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/CreateSalesKit"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/sales_kit/{kit_code}" : {
      "put" : {
        "tags" : [ "Sales Kit" ],
        "summary" : "Update Sales Kit.",
        "description" : "Update Sales Kit.",
        "operationId" : "updateSalesKit",
        "parameters" : [ {
          "name" : "kit_code",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "description" : "Sales Kit Request Body.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SalesKit"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/UpdateSalesKit"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/currencies/online-exchange-rate/{curr_code}" : {
      "get" : {
        "tags" : [ "Currency" ],
        "summary" : "Get Online Currency Rate.",
        "description" : "Get online currency rate, the rate is from the default company currency to the passed curreny",
        "operationId" : "getOnlineCurrencyRate",
        "parameters" : [ {
          "name" : "curr_code",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "USD"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/OnlineCurrencyRate"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/accruals" : {
      "post" : {
        "tags" : [ "Amortization" ],
        "summary" : "Add Revenue/Cost Accrual.",
        "description" : "Add Revenue/Cost Accrual",
        "requestBody" : {
          "description" : "COMPANY BODY DATA",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Accruals"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/Accruals"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/accruals/trans" : {
      "get" : {
        "tags" : [ "Amortization" ],
        "summary" : "Get transactions per given account.",
        "description" : "Get transactions for a given Accrued Balance Account to use an amount in Accrual process.",
        "parameters" : [ {
          "name" : "act",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/AccrualTransactions"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/depreciation/process" : {
      "post" : {
        "tags" : [ "Depreciation" ],
        "summary" : "Process depreciation.",
        "description" : "Process Fixed assets depreciation.",
        "requestBody" : {
          "description" : "Depreciation Body Data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Depreciation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/DepreciationProcess"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/depreciation/show_gl" : {
      "post" : {
        "tags" : [ "Depreciation" ],
        "summary" : "Get GL rows.",
        "description" : "Get GL rows that will be generated after Process fixed assets depreciation.",
        "requestBody" : {
          "description" : "GL rows Body Data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShowGLRows"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/DepreciationGLRows"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    },
    "/depreciation/starting-month" : {
      "get" : {
        "tags" : [ "Depreciation" ],
        "summary" : "Get Starting month.",
        "description" : "Get starting month for depreciation process.",
        "parameters" : [ {
          "name" : "stock_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/responses/DepreciationStartingMonth"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/responses/403"
          }
        },
        "security" : [ {
          "TokenSecured" : [ ]
        }, {
          "X-PREFIX" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "CompanySetup" : {
        "type" : "object",
        "properties" : {
          "sales_types" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SalesTypes"
            }
          },
          "fiscal_year" : {
            "$ref" : "#/components/schemas/FiscalYear"
          },
          "fiscal_years" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FiscalYear"
            }
          },
          "cur_fiscal_year" : {
            "$ref" : "#/components/schemas/FiscalYear"
          }
        }
      },
      "Company" : {
        "required" : [ "coa", "collation", "dbname", "dbuser", "host", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "TMT"
          },
          "port" : {
            "type" : "string",
            "example" : ""
          },
          "tbpref" : {
            "type" : "string",
            "example" : ""
          },
          "password" : {
            "type" : "string",
            "example" : ""
          },
          "host" : {
            "type" : "string",
            "example" : "localhost"
          },
          "dbname" : {
            "type" : "string",
            "example" : "ERP"
          },
          "collation" : {
            "type" : "string",
            "example" : "utf8_xx"
          },
          "dbuser" : {
            "type" : "string",
            "example" : "root"
          },
          "coa" : {
            "type" : "string",
            "example" : "en_5_BKEmptyCompany.sql"
          }
        }
      },
      "CompanyUpdateData" : {
        "type" : "object",
        "properties" : {
          "inv_template_id" : {
            "type" : "integer",
            "example" : 1
          },
          "inv_color_id" : {
            "type" : "string",
            "example" : "#fffff"
          },
          "pic" : {
            "type" : "string",
            "description" : "upload a logo using form data",
            "format" : "file"
          }
        }
      },
      "Customer" : {
        "required" : [ "address", "bank_account", "curr_code", "cust_ref", "name", "payment_terms", "sales_type", "tax_group_id", "tax_id", "tax_sub_location_id" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "yazan alouda"
          },
          "address" : {
            "type" : "string",
            "example" : "alouda address"
          },
          "curr_code" : {
            "type" : "string",
            "example" : "AED"
          },
          "bank_account" : {
            "type" : "string",
            "example" : "1234"
          },
          "phone" : {
            "type" : "string",
            "example" : "11218535232"
          },
          "phone2" : {
            "type" : "string",
            "example" : "11218535232"
          },
          "email" : {
            "type" : "string",
            "example" : "mcledgeralouda@mcledger.com"
          },
          "cust_ref" : {
            "type" : "string",
            "description" : "customer reference must be unique each time",
            "example" : "ref-yazan"
          },
          "sales_type" : {
            "type" : "string",
            "description" : "price before/after tax",
            "example" : "1"
          },
          "payment_terms" : {
            "type" : "string",
            "description" : "cash only  , after 15 day  , on account",
            "example" : "4"
          },
          "tax_group_id" : {
            "type" : "string",
            "description" : "tax group id",
            "example" : "1"
          },
          "tax_sub_location_id" : {
            "type" : "integer",
            "description" : "Tax sub location id, it's FTA related."
          }
        }
      },
      "CustomerMulti" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/CustomerMulti_inner"
        }
      },
      "NewCustomerPayment" : {
        "required" : [ "DateBanked", "TotalNumberOfAllocs", "amount", "bank_account", "charge", "customer_id", "trans_type" ],
        "type" : "object",
        "properties" : {
          "TotalNumberOfAllocs" : {
            "type" : "integer",
            "description" : "it's the number of sales invoices we want to allocate money to after create a new customer payment",
            "example" : 0
          },
          "trans_type" : {
            "type" : "integer",
            "description" : "12 for customer payment make it static like that in the code",
            "example" : 12
          },
          "bank_account" : {
            "type" : "string",
            "description" : "represent the into bank account in ERP , 4 for cash on hand",
            "example" : "4"
          },
          "charge" : {
            "type" : "string",
            "description" : "represent the bank charge if exist , but take care bank charge and amount mustn't be the same",
            "example" : ""
          },
          "amount" : {
            "type" : "string",
            "description" : "represent the customer payment amount",
            "example" : "2000"
          },
          "DateBanked" : {
            "type" : "string",
            "description" : "represent the date of deposite",
            "format" : "date"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "customer id that we craete the customer payment from",
            "example" : 112
          },
          "memo_" : {
            "type" : "string",
            "description" : "comment about the customer payment",
            "example" : "hi this is memo"
          },
          "amount0" : {
            "type" : "string",
            "description" : "amount0 represent the first amount of the invoice we want to allocate the payment for , if TotalNumberOfAllocs = 4  , then we would have amout[0-3]",
            "example" : ""
          },
          "un_allocated0" : {
            "type" : "string",
            "description" : "un_allocated0 represent the first un_allocated amount or the remaining of the invoice  we want to allocate the payment for , if TotalNumberOfAllocs = 4  , then we would have un_allocated[0-3] , you must get this information from get sales invoice api before start to allocate",
            "example" : ""
          }
        }
      },
      "AllocateCustomerPayment" : {
        "required" : [ "DateBanked", "TotalNumberOfAllocs", "debtor_no", "trans_no", "trans_type" ],
        "type" : "object",
        "properties" : {
          "TotalNumberOfAllocs" : {
            "type" : "integer",
            "description" : "it's the number of sales invoices we want to allocate money to after create a new customer payment",
            "example" : 1
          },
          "trans_no" : {
            "type" : "integer",
            "description" : "the payment we want to allocate amounts from",
            "example" : 106
          },
          "trans_type" : {
            "type" : "integer",
            "description" : "12 for customer payment make it static like that in the code",
            "example" : 12
          },
          "amount" : {
            "type" : "string",
            "example" : "1200"
          },
          "DateBanked" : {
            "type" : "string",
            "description" : "represent the date of deposite",
            "format" : "date"
          },
          "debtor_no" : {
            "type" : "integer",
            "description" : "customer id that we craete the customer payment from",
            "example" : 109
          },
          "amount0" : {
            "type" : "string",
            "description" : "amount0 represent the first amount of the invoice we want to allocate the payment for , if TotalNumberOfAllocs = 4  , then we would have amout[0-3]",
            "example" : "600"
          },
          "un_allocated0" : {
            "type" : "string",
            "description" : "un_allocated0 represent the first un_allocated amount or the remaining of the invoice  we want to allocate the payment for , if TotalNumberOfAllocs = 4  , then we would have un_allocated[0-3] , you must get this information from get sales invoice api before start to allocate",
            "example" : "600"
          }
        }
      },
      "Supplier" : {
        "required" : [ "address", "bank_account", "curr_code", "payment_terms", "supp_address", "supp_name", "supp_ref", "tax_group_id", "tax_included" ],
        "type" : "object",
        "properties" : {
          "supp_name" : {
            "type" : "string",
            "example" : "ahmad supplier"
          },
          "supp_ref" : {
            "type" : "string",
            "description" : "supplier reference",
            "example" : "ahmad-sup-ref123"
          },
          "bank_account" : {
            "type" : "string",
            "description" : "supplier bank account , 4 for cash on hand",
            "example" : "4"
          },
          "payment_terms" : {
            "type" : "string",
            "description" : "payment term , whether it cash , on account , after 15 days",
            "example" : "4"
          },
          "curr_code" : {
            "type" : "string",
            "description" : "Currency code for the supplier",
            "example" : "USD"
          },
          "tax_group_id" : {
            "type" : "string",
            "description" : "tax group , is somehitng group taxes with similar attributes togther",
            "example" : "1"
          },
          "tax_included" : {
            "type" : "string",
            "description" : "tax included in invoices or not ?",
            "example" : "0"
          },
          "address" : {
            "type" : "string",
            "description" : "mailing address of the supplier",
            "example" : "ahmad@mcledger.com "
          },
          "supp_address" : {
            "type" : "string",
            "description" : "physical address of a supplier",
            "example" : "6th street"
          },
          "person_id" : {
            "type" : "string",
            "description" : "please provide it in case you want to update supplier only remove it from add new supplier",
            "example" : "10"
          }
        }
      },
      "Item" : {
        "required" : [ "category_id", "description", "long_description", "sales_prices", "stock_id" ],
        "type" : "object",
        "properties" : {
          "stock_id" : {
            "type" : "string",
            "description" : "represent the id of the item but it can be string",
            "example" : "778958"
          },
          "description" : {
            "type" : "string",
            "description" : "name of the item",
            "example" : "tmt-item-name"
          },
          "long_description" : {
            "type" : "string",
            "description" : "description for item",
            "example" : "long description for item"
          },
          "category_id" : {
            "type" : "integer",
            "description" : "item category for ex:(product , oil service ... )",
            "example" : 26
          },
          "sales_prices" : {
            "type" : "array",
            "description" : "Currency code for the supplier",
            "items" : {
              "$ref" : "#/components/schemas/SalesPricing"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "This type to identify is item is normal or fixed assets",
            "example" : "items"
          },
          "depreciation_method" : {
            "type" : "string",
            "description" : "Depreciation method for fixed assets,",
            "example" : "S"
          },
          "depreciation_rate" : {
            "type" : "integer",
            "description" : "The rate of depreciation of fixed assets, based on depreciation method being selected",
            "example" : 5
          },
          "depreciation_factor" : {
            "type" : "string",
            "example" : "0"
          },
          "depreciation_start" : {
            "type" : "string",
            "example" : "2021/11/09"
          },
          "fa_class_id" : {
            "type" : "string",
            "description" : "The class ID for fixed asset items",
            "example" : "001"
          }
        }
      },
      "ItemMulti" : {
        "required" : [ "category_id", "description", "long_description", "sales_prices", "stock_id" ],
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ItemMulti_inner"
        }
      },
      "ItemDetails" : {
        "type" : "object",
        "properties" : {
          "stock_id" : {
            "type" : "string",
            "description" : "represent the id of the item but it can be string",
            "example" : "778958"
          },
          "description" : {
            "type" : "string",
            "description" : "name of the item",
            "example" : "tmt-item-name"
          },
          "long_description" : {
            "type" : "string",
            "description" : "description for item",
            "example" : "long description for item"
          },
          "category_id" : {
            "type" : "integer",
            "description" : "item category for ex:(product , oil service ... )",
            "example" : 26
          },
          "tax_type_id" : {
            "type" : "integer",
            "example" : 1
          },
          "units" : {
            "type" : "string",
            "example" : "each"
          },
          "mb_flag" : {
            "type" : "string",
            "example" : "F"
          },
          "sales_account" : {
            "type" : "integer",
            "example" : 4123
          },
          "cogs_account" : {
            "type" : "integer",
            "example" : 6211
          },
          "inventory_account" : {
            "type" : "integer",
            "example" : 4123
          },
          "adjustment_account" : {
            "type" : "integer",
            "example" : 4123
          },
          "wip_account" : {
            "type" : "integer",
            "example" : 4123
          },
          "dimension_id" : {
            "type" : "integer",
            "example" : 0
          },
          "dimension2_id" : {
            "type" : "integer",
            "example" : 0
          },
          "purchase_cost" : {
            "type" : "integer",
            "example" : 1
          },
          "labour_cost" : {
            "type" : "integer",
            "example" : 1
          },
          "overhead_cost" : {
            "type" : "integer",
            "example" : 0
          },
          "inactive" : {
            "type" : "integer",
            "example" : 0
          },
          "no_sale" : {
            "type" : "integer",
            "example" : 1
          },
          "no_purchase" : {
            "type" : "integer",
            "example" : 1
          },
          "editable" : {
            "type" : "integer",
            "example" : 1
          },
          "depreciation_method" : {
            "type" : "integer",
            "example" : 1
          },
          "depreciation_rate" : {
            "type" : "integer",
            "example" : 1
          },
          "depreciation_factor" : {
            "type" : "integer",
            "example" : 1
          },
          "depreciation_start" : {
            "type" : "string",
            "example" : "0000-00-00"
          },
          "depreciation_date" : {
            "type" : "string",
            "example" : "0000-00-00"
          },
          "fa_class_id" : {
            "type" : "integer",
            "example" : 1
          },
          "tax_type_name" : {
            "type" : "string",
            "example" : "Standard Rated"
          }
        }
      },
      "UpdateItem" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "name of the item",
            "example" : "tmt-item-name"
          },
          "long_description" : {
            "type" : "string",
            "description" : "description for item",
            "example" : "long description for item"
          },
          "category_id" : {
            "type" : "integer",
            "description" : "item category for ex:(product , oil service ... )",
            "example" : 26
          },
          "sales_prices" : {
            "type" : "array",
            "description" : "Currency code for the supplier",
            "items" : {
              "$ref" : "#/components/schemas/SalesPricing"
            }
          }
        }
      },
      "UpdateMultiItem" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/UpdateMultiItem_inner"
        }
      },
      "SalesPricing" : {
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "string",
            "example" : "100"
          },
          "curr_abrev" : {
            "type" : "string",
            "description" : "currency of the sales pricing USD , AED ...etc",
            "example" : "AED"
          },
          "sales_type_id" : {
            "type" : "string",
            "description" : "sales type ( price before/after tax )",
            "example" : "2"
          }
        },
        "description" : "sales pricing represent the default price for the item depend on the sales type"
      },
      "CreateSalesPricing" : {
        "required" : [ "curr_abrev", "sales_type_id", "stock_id" ],
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "string",
            "example" : "100"
          },
          "stock_id" : {
            "type" : "string",
            "example" : "41111"
          },
          "curr_abrev" : {
            "type" : "string",
            "description" : "currency of the sales pricing USD , AED ...etc",
            "example" : "AED"
          },
          "sales_type_id" : {
            "type" : "string",
            "description" : "sales type ( price before/after tax )",
            "example" : "2"
          }
        },
        "description" : "sales pricing represent the default price for the item depend on the sales type"
      },
      "UpdateSalesPricing" : {
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "string",
            "example" : "99"
          },
          "stock_id" : {
            "type" : "string",
            "example" : "411110"
          },
          "curr_abrev" : {
            "type" : "string",
            "description" : "currency of the sales pricing USD , AED ...etc",
            "example" : "AED"
          },
          "sales_type_id" : {
            "type" : "string",
            "description" : "sales type ( price before/after tax )",
            "example" : "2"
          }
        },
        "description" : "sales pricing represent the default price for the item depend on the sales type"
      },
      "SalesInvoice" : {
        "required" : [ "customer_id", "invoice_date", "items", "payment", "sales_type" ],
        "type" : "object",
        "properties" : {
          "invoice_date" : {
            "type" : "string",
            "description" : "the invoice transaction date",
            "format" : "date"
          },
          "delivery_date" : {
            "type" : "string",
            "description" : "the when the payment term not cash and will be due x days , a delivery date need to be specified",
            "format" : "date"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "customer id",
            "example" : 112
          },
          "deliver_to" : {
            "type" : "string",
            "description" : "customer name , or any kind of string specify who will accept the invoice",
            "example" : "yazan alouda"
          },
          "ref" : {
            "type" : "string",
            "description" : "invoice reference must be unqiue reference each time we insert it , it's not required if we did not pass it the invoice will generate a unique ref depend on ERP pattern",
            "example" : "107/2021"
          },
          "payment" : {
            "type" : "integer",
            "description" : "payment terms , 4 for cash",
            "example" : 4
          },
          "sales_type" : {
            "type" : "integer",
            "description" : "price after/before tax",
            "example" : 2
          },
          "frieght_cost" : {
            "type" : "integer",
            "description" : "shipping charge cost",
            "example" : 100
          },
          "items" : {
            "type" : "array",
            "description" : "line items of the invoice",
            "items" : {
              "$ref" : "#/components/schemas/lineItems"
            }
          },
          "disable_integration" : {
            "type" : "boolean",
            "description" : "disable integration with rms , if yes then the created invoice won't be created in rms",
            "example" : false
          },
          "cloud" : {
            "$ref" : "#/components/schemas/SalesInvoice_cloud"
          }
        },
        "description" : "the sales invoice creation data"
      },
      "SalesInvoiceDetails" : {
        "type" : "object",
        "properties" : {
          "trans_no" : {
            "type" : "integer",
            "description" : "The Invoice Transaction Number",
            "example" : 649
          },
          "type" : {
            "type" : "integer",
            "example" : 10
          },
          "version" : {
            "type" : "integer",
            "description" : "customer id",
            "example" : 0
          },
          "debtor_no" : {
            "type" : "integer",
            "example" : 10
          },
          "branch_code" : {
            "type" : "integer",
            "example" : 50
          },
          "tran_date" : {
            "type" : "string",
            "format" : "date"
          },
          "due_date" : {
            "type" : "string",
            "format" : "date"
          },
          "reference" : {
            "type" : "string",
            "description" : "price after/before tax",
            "example" : "341/2021"
          },
          "tpe" : {
            "type" : "integer",
            "description" : "shipping charge cost",
            "example" : 100
          },
          "line_items" : {
            "type" : "array",
            "description" : "line items of the invoice",
            "items" : {
              "$ref" : "#/components/schemas/lineItems"
            }
          },
          "order_" : {
            "type" : "integer",
            "example" : 680
          },
          "ov_amount" : {
            "type" : "integer",
            "example" : 1000
          },
          "ov_gst" : {
            "type" : "integer",
            "example" : 0
          },
          "ov_freight" : {
            "type" : "integer",
            "example" : 680
          },
          "ov_freight_tax" : {
            "type" : "integer",
            "example" : 0
          },
          "ov_discount" : {
            "type" : "integer",
            "example" : 0
          },
          "alloc" : {
            "type" : "integer",
            "example" : 0
          },
          "prep_amount" : {
            "type" : "integer",
            "example" : 0
          },
          "rate" : {
            "type" : "integer",
            "example" : 2
          },
          "ship_via" : {
            "type" : "integer",
            "example" : 0
          },
          "dimension_id" : {
            "type" : "integer",
            "example" : 0
          },
          "dimension2_id" : {
            "type" : "integer",
            "example" : 0
          },
          "payment_terms" : {
            "type" : "integer",
            "example" : 2
          },
          "tax_included" : {
            "type" : "integer",
            "example" : 0
          },
          "salesman_code" : {
            "type" : "integer",
            "example" : 0
          },
          "name" : {
            "type" : "string",
            "example" : "new one"
          },
          "debtor_ref" : {
            "type" : "string",
            "example" : "Reeef"
          },
          "address" : {
            "type" : "string",
            "example" : ""
          },
          "tax_id" : {
            "type" : "integer",
            "example" : 0
          },
          "curr_code" : {
            "type" : "string",
            "example" : "AED"
          },
          "sales_type" : {
            "type" : "integer",
            "example" : 2
          },
          "credit_status" : {
            "type" : "integer",
            "example" : 0
          },
          "pymt_discount" : {
            "type" : "integer",
            "example" : 0
          },
          "credit_limit" : {
            "type" : "integer",
            "example" : 0
          },
          "notes" : {
            "type" : "string",
            "example" : ""
          },
          "inactive" : {
            "type" : "integer",
            "example" : 0
          },
          "paid" : {
            "type" : "string",
            "example" : "AED"
          },
          "summary" : {
            "type" : "integer",
            "example" : 2
          },
          "onstanding" : {
            "type" : "integer",
            "example" : 1
          },
          "allocations" : {
            "$ref" : "#/components/schemas/Allocation"
          },
          "salesman" : {
            "$ref" : "#/components/schemas/Salesman"
          },
          "customer" : {
            "$ref" : "#/components/schemas/CustomerList"
          }
        }
      },
      "RoboSalesInvoice" : {
        "required" : [ "cloud", "customer_name", "disable_integration", "invoice_date", "payment_term_text" ],
        "type" : "object",
        "properties" : {
          "invoice_date" : {
            "type" : "string",
            "description" : "the invoice transaction date",
            "format" : "date"
          },
          "delivery_date" : {
            "type" : "string",
            "description" : "the when the payment term not cash and will be due x days , a delivery date need to be specified",
            "format" : "date"
          },
          "customer_name" : {
            "type" : "string",
            "description" : "customer name , the api will looking for someone has the same name and get it's id",
            "example" : "yazan"
          },
          "payment_term_text" : {
            "type" : "string",
            "description" : "text of the payment term , and the api map the payment term id to the invoice",
            "example" : "Cash"
          },
          "items" : {
            "type" : "array",
            "description" : "line items of the invoice",
            "items" : {
              "$ref" : "#/components/schemas/lineItems"
            }
          },
          "disable_integration" : {
            "type" : "boolean",
            "description" : "disable integration with rms is must here because we didn't want to create a new request in rms we call this api to append transactions to the request that processed by OCR",
            "example" : false
          },
          "cloud" : {
            "$ref" : "#/components/schemas/SalesInvoice_cloud"
          }
        },
        "description" : "the aim of robo sales invoice is to provide information from a real invoice via OCR so we passing customer name , and paymet term as text and the api matching the ids"
      },
      "lineItems" : {
        "required" : [ "discount", "price", "quantity", "stock_id" ],
        "type" : "object",
        "properties" : {
          "stock_id" : {
            "type" : "string",
            "description" : "the id of the item",
            "example" : "41122"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "Valet Parking",
            "example" : 1
          },
          "price" : {
            "type" : "string",
            "description" : "price of the item",
            "example" : "100"
          },
          "discount" : {
            "type" : "string",
            "description" : "discount of the item",
            "example" : "10"
          }
        },
        "description" : "line items of the invoices or any transactions"
      },
      "VoidTransaction" : {
        "required" : [ "trans_no", "type_no" ],
        "type" : "object",
        "properties" : {
          "trans_no" : {
            "type" : "string",
            "description" : "the transaction number of the target void transaction",
            "example" : "126"
          },
          "type_no" : {
            "type" : "integer",
            "description" : "determine the type of the voided transaction",
            "example" : 10
          }
        }
      },
      "isTransactionVoided" : {
        "type" : "object",
        "properties" : {
          "transactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VoidTransaction"
            }
          }
        }
      },
      "SalesOrder" : {
        "required" : [ "cust_ref", "customer_id", "delivery_date", "items", "order_date", "payment", "sales_type" ],
        "type" : "object",
        "properties" : {
          "order_date" : {
            "type" : "string",
            "description" : "the sales order date",
            "format" : "date"
          },
          "delivery_date" : {
            "type" : "string",
            "description" : "the when the payment term not cash and will be due x days , a delivery date need to be specified",
            "format" : "date"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "customer id",
            "example" : 161
          },
          "deliver_to" : {
            "type" : "string",
            "description" : "customer name , or any kind of string specify who will accept the invoice",
            "example" : "Abbas Ali"
          },
          "cust_ref" : {
            "type" : "string",
            "description" : "customer reference , or it's unqiue name",
            "example" : "general customer"
          },
          "ref" : {
            "type" : "string",
            "description" : "invoice reference must be unqiue reference each time we insert it , it's not required if we did not pass it the invoice will generate a unique ref depend on ERP pattern",
            "example" : "ref-12399-2"
          },
          "payment" : {
            "type" : "integer",
            "description" : "payment terms , 4 for cash",
            "example" : 4
          },
          "sales_type" : {
            "type" : "integer",
            "description" : "price after/before tax",
            "example" : 2
          },
          "frieght_cost" : {
            "type" : "integer",
            "description" : "shipping charge cost",
            "example" : 100
          },
          "items" : {
            "type" : "array",
            "description" : "line items of the invoice",
            "items" : {
              "$ref" : "#/components/schemas/lineItems"
            }
          }
        },
        "description" : "the sales invoice creation data"
      },
      "UpdateSalesOrder" : {
        "type" : "object",
        "properties" : {
          "order_date" : {
            "type" : "string",
            "description" : "the sales order date",
            "format" : "date"
          },
          "delivery_date" : {
            "type" : "string",
            "description" : "the when the payment term not cash and will be due x days , a delivery date need to be specified",
            "format" : "date"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "customer id",
            "example" : 112
          },
          "deliver_to" : {
            "type" : "string",
            "description" : "customer name , or any kind of string specify who will accept the invoice",
            "example" : "yazan alouda"
          },
          "cust_ref" : {
            "type" : "string",
            "description" : "customer reference , or it's unqiue name",
            "example" : "ref-yazan"
          },
          "ref" : {
            "type" : "string",
            "description" : "invoice reference must be unqiue reference each time we insert it , it's not required if we did not pass it the invoice will generate a unique ref depend on ERP pattern",
            "example" : "007/2021"
          },
          "payment" : {
            "type" : "integer",
            "description" : "payment terms , 4 for cash",
            "example" : 4
          },
          "sales_type" : {
            "type" : "integer",
            "description" : "price after/before tax",
            "example" : 2
          },
          "frieght_cost" : {
            "type" : "integer",
            "description" : "shipping charge cost",
            "example" : 100
          },
          "items" : {
            "type" : "array",
            "description" : "line items of the invoice",
            "items" : {
              "$ref" : "#/components/schemas/lineItems"
            }
          }
        },
        "description" : "the sales invoice creation data"
      },
      "UpdatePWPRequests" : {
        "required" : [ "request_no" ],
        "type" : "object",
        "properties" : {
          "request_no" : {
            "type" : "integer",
            "description" : "the rms request no , the new  value in request_no column",
            "example" : 58
          }
        },
        "description" : "update the pwp request fields"
      },
      "ZATCARequest" : {
        "required" : [ "date", "seller_name", "tax_amount", "tax_number", "total_amount" ],
        "type" : "object",
        "properties" : {
          "seller_name" : {
            "type" : "string",
            "description" : "The seller name represent the company name.",
            "example" : "MCledger"
          },
          "tax_number" : {
            "type" : "string",
            "description" : "TRN number regarding the tax.",
            "example" : "29292929"
          },
          "total_amount" : {
            "type" : "number",
            "description" : "Total amount of the invoice include the tax",
            "example" : 100
          },
          "date" : {
            "type" : "string",
            "description" : "Invoice Date.",
            "example" : "2021/20/10"
          },
          "tax_amount" : {
            "type" : "number",
            "description" : "Invoice Tax amount",
            "example" : 10
          }
        }
      },
      "NonGLModuleType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "integer",
            "description" : "transaction type , 30 stands for sales order",
            "example" : 30
          }
        },
        "description" : "add new trans type body in non gl moodule file"
      },
      "Salesman" : {
        "required" : [ "salesman_name" ],
        "type" : "object",
        "properties" : {
          "salesman_name" : {
            "type" : "string",
            "description" : "the name of the saleman",
            "example" : "Ahmad SALESPERSON"
          },
          "provision" : {
            "type" : "integer",
            "example" : 0
          },
          "provision2" : {
            "type" : "integer",
            "example" : 0
          },
          "break_pt" : {
            "type" : "integer",
            "example" : 0
          },
          "salesman_phone" : {
            "type" : "string",
            "description" : "the phone number of the saleman",
            "example" : "1092600"
          },
          "salesman_email" : {
            "type" : "string",
            "description" : "the email of the saleman",
            "example" : "ahmad@SALESPERSON.com"
          },
          "salesman_fax" : {
            "type" : "string",
            "description" : "the fax of the saleman",
            "example" : "ahmad FAX"
          }
        },
        "description" : "add new salesman data"
      },
      "UpdateSalesman" : {
        "type" : "object",
        "properties" : {
          "salesman_name" : {
            "type" : "string",
            "description" : "the name of the saleman",
            "example" : "ahmad SALESPERSON"
          },
          "provision" : {
            "type" : "integer",
            "example" : 0
          },
          "provision2" : {
            "type" : "integer",
            "example" : 0
          },
          "break_pt" : {
            "type" : "integer",
            "example" : 0
          },
          "salesman_phone" : {
            "type" : "string",
            "description" : "the phone number of the saleman",
            "example" : "1092800"
          },
          "salesman_email" : {
            "type" : "string",
            "description" : "the email of the saleman",
            "example" : "ahmad@SALESPERSON.com"
          },
          "salesman_fax" : {
            "type" : "string",
            "description" : "the fax of the saleman",
            "example" : "ahmad FAX"
          }
        },
        "description" : "add new salesman data"
      },
      "CreditThis" : {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/lineItems"
            }
          }
        },
        "description" : "array of items to credit them"
      },
      "User" : {
        "required" : [ "showSql", "users" ],
        "type" : "object",
        "properties" : {
          "bypass_companies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserArray"
            }
          },
          "users" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "company prefixes we need to skip in our iteration",
              "example" : ""
            }
          },
          "showSql" : {
            "type" : "boolean",
            "description" : "this param indicate whether we want to only produce a sql , or we want to execute them also",
            "example" : false
          }
        },
        "description" : "show sql param for debugging , and array of users we want to create"
      },
      "Purchase" : {
        "required" : [ "OrderDate", "cash_account", "due_date", "line_items" ],
        "type" : "object",
        "properties" : {
          "OrderDate" : {
            "type" : "string",
            "description" : "invoice date",
            "format" : "date"
          },
          "due_date" : {
            "type" : "string",
            "description" : "invoice due date",
            "format" : "date"
          },
          "cash_account" : {
            "type" : "string",
            "description" : "Payment of the invoice , empty means it's delayed",
            "example" : ""
          },
          "cash_account_name" : {
            "type" : "string",
            "description" : "cash account name used with robo accountant , when we pass this variable then we don't have to pass cash_account id , becasue this variable search for all cash accounts and get the one who match this name",
            "example" : "petty cash"
          },
          "supplier_name" : {
            "type" : "string",
            "description" : "looking for the supplier in the db , if it's not exist then create it with payment_term_name and default company currency variable passed also",
            "example" : "tmt"
          },
          "supplier_id" : {
            "type" : "integer",
            "description" : "supplier id passed  , when this variable specified the supplier_name ignored and payment_term_name",
            "example" : 1
          },
          "payment_term_name" : {
            "type" : "string",
            "description" : "payment term name used in create new supplier within this api",
            "example" : "Cash"
          },
          "supp_ref" : {
            "type" : "string",
            "description" : "supplier reference must be unique and it's not required , it's created automatically if it's not provided",
            "example" : "asd2ed"
          },
          "line_items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/lineItems"
            }
          },
          "cloud" : {
            "$ref" : "#/components/schemas/Purchase_cloud"
          }
        },
        "description" : "create new supplier invoice"
      },
      "UserArray" : {
        "required" : [ "email", "password", "role", "username" ],
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "username is unique and user use it to login",
            "example" : "abdallah.ismail@cyberaccounting.ae"
          },
          "email" : {
            "type" : "string",
            "description" : "email of the user but not used in login",
            "example" : "abdallah.ismail@cyberaccounting.ae"
          },
          "password" : {
            "type" : "string",
            "description" : "password here will be string but ERP will change it to md5 encryption",
            "example" : "m3M2RfWc_D"
          },
          "role" : {
            "type" : "string",
            "description" : "role of the user , role is very tricky we insert here the role name and we LIKE it witht he role name in the database , if we didn't find the role in the current company iteration we get it from the template that the current company created from , if we didn't find it we don't create the user at all",
            "example" : "checker"
          }
        }
      },
      "SalesInvoice_cloud" : {
        "required" : [ "item_no", "request_no", "trans_type" ],
        "type" : "object",
        "properties" : {
          "request_no" : {
            "type" : "integer",
            "description" : "rms request no that we want to integrate with",
            "example" : 1620
          },
          "item_no" : {
            "type" : "integer",
            "description" : "rms item no that we want to integrate with",
            "example" : 1649
          },
          "trans_type" : {
            "type" : "integer",
            "description" : "represent the type of transaction we want to integrate",
            "example" : 10
          }
        },
        "description" : "cloud object represent the integration of invoice to an existing rms request and item , but disable_integration above if it's 0 then the invoice will create a request from scratch and append the invoice in it , so if we will use cloud make sure disable_integration = 1"
      },
      "Purchase_cloud" : {
        "required" : [ "item_no", "request_no", "trans_type" ],
        "type" : "object",
        "properties" : {
          "request_no" : {
            "type" : "integer",
            "description" : "the rms reuqest no we want to integrate with",
            "example" : 1730
          },
          "item_no" : {
            "type" : "integer",
            "description" : "the rms item no we want to integrate with",
            "example" : 1762
          },
          "trans_type" : {
            "type" : "integer",
            "description" : "trans_type here must be 20 as it's represent he supplier invoice",
            "example" : 20
          }
        }
      },
      "SalesTypes" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "sales type id",
            "example" : 2
          },
          "sales_type" : {
            "type" : "string",
            "example" : "Price After Tax"
          },
          "factor" : {
            "type" : "integer",
            "example" : 1
          },
          "inactive" : {
            "type" : "integer",
            "example" : 0
          },
          "selected" : {
            "type" : "integer",
            "example" : 0
          }
        }
      },
      "FiscalYear" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "fiscal year id",
            "example" : 2
          },
          "begin" : {
            "type" : "string",
            "example" : "2018-01-01"
          },
          "end" : {
            "type" : "string",
            "example" : "2018-12-31"
          },
          "closed" : {
            "type" : "integer",
            "example" : 0
          }
        }
      },
      "CompanyUpdateMultiInvoiceState" : {
        "type" : "array",
        "items" : {
          "example" : "1_"
        }
      },
      "CompanyReminderSettings" : {
        "type" : "object",
        "properties" : {
          "reminder_active" : {
            "type" : "integer",
            "description" : "Reminder active state, 1 for active , 0 for not active",
            "example" : 1,
            "enum" : [ 1, 2 ]
          },
          "reminder_hour" : {
            "maximum" : 24,
            "minimum" : 0,
            "type" : "integer",
            "example" : 12
          },
          "reminder_first_due_date" : {
            "type" : "string",
            "example" : "2018-12-31"
          },
          "reminder_second_due_date" : {
            "type" : "string",
            "example" : "2018-12-31"
          }
        }
      },
      "CustomerList" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 6
          },
          "person_id" : {
            "type" : "integer",
            "example" : 6
          },
          "type" : {
            "type" : "string",
            "example" : "customer"
          },
          "action" : {
            "type" : "string",
            "example" : "general"
          },
          "entity_id" : {
            "type" : "integer",
            "example" : 4
          },
          "debtor_no" : {
            "type" : "integer",
            "example" : 4
          },
          "name" : {
            "type" : "string",
            "example" : "Name"
          },
          "debtor_ref" : {
            "type" : "string",
            "example" : "USD Customer"
          },
          "address" : {
            "type" : "string",
            "example" : "6th address example"
          },
          "tax_id" : {
            "type" : "integer",
            "example" : 4
          },
          "curr_code" : {
            "type" : "string",
            "example" : "USD"
          },
          "sales_type" : {
            "type" : "integer",
            "example" : 1
          },
          "dimension_id" : {
            "type" : "integer",
            "example" : 1
          },
          "dimension2_id" : {
            "type" : "integer",
            "example" : 2
          },
          "credit_status" : {
            "type" : "integer",
            "example" : 1
          },
          "payment_terms" : {
            "type" : "integer",
            "example" : 4
          },
          "discount" : {
            "type" : "integer",
            "example" : 0
          },
          "pymt_discount" : {
            "type" : "integer",
            "example" : 0
          },
          "credit_limit" : {
            "type" : "integer",
            "example" : 1000
          },
          "notes" : {
            "type" : "string",
            "example" : "Notes Test"
          },
          "inactive" : {
            "type" : "integer",
            "example" : 1
          },
          "ref" : {
            "type" : "string",
            "example" : "USD Customer"
          },
          "name2" : {
            "type" : "string",
            "example" : ""
          },
          "phone" : {
            "type" : "string",
            "example" : "011248478483"
          },
          "phone2" : {
            "type" : "string",
            "example" : ""
          },
          "fax" : {
            "type" : "string",
            "example" : ""
          },
          "email" : {
            "type" : "string",
            "example" : "mcledger@mcledger.com"
          },
          "lang" : {
            "type" : "string",
            "example" : ""
          },
          "hasTransactions" : {
            "type" : "string",
            "example" : "true"
          },
          "current" : {
            "type" : "integer",
            "example" : 0
          },
          "balance" : {
            "type" : "integer",
            "example" : 0
          },
          "branches" : {
            "$ref" : "#/components/schemas/Branch"
          }
        }
      },
      "Branch" : {
        "type" : "object",
        "properties" : {
          "branch_code" : {
            "type" : "integer",
            "example" : 6
          },
          "debtor_no" : {
            "type" : "integer",
            "example" : 6
          },
          "br_name" : {
            "type" : "string",
            "example" : "branch name"
          },
          "branch_ref" : {
            "type" : "string",
            "example" : "branch ref"
          },
          "br_address" : {
            "type" : "string",
            "example" : "address"
          },
          "area" : {
            "type" : "integer",
            "example" : 4
          },
          "salesman" : {
            "type" : "integer",
            "example" : 1
          },
          "default_location" : {
            "type" : "string",
            "example" : "Def Location"
          },
          "tax_group_id" : {
            "type" : "integer",
            "example" : 1
          },
          "sales_account" : {
            "type" : "integer",
            "example" : 4123
          },
          "sales_discount_account" : {
            "type" : "integer",
            "example" : 1231
          },
          "receivables_account" : {
            "type" : "integer",
            "example" : 1221
          },
          "payment_discount_account" : {
            "type" : "integer",
            "example" : 12311
          },
          "default_ship_via" : {
            "type" : "integer",
            "example" : 2
          },
          "br_post_address" : {
            "type" : "string",
            "example" : "address post"
          },
          "group_no" : {
            "type" : "integer",
            "example" : 0
          },
          "notes" : {
            "type" : "string",
            "example" : ""
          },
          "bank_account" : {
            "type" : "integer",
            "example" : 2929
          },
          "inactive" : {
            "type" : "integer",
            "example" : 0
          },
          "tax_sub_location_id" : {
            "type" : "integer",
            "example" : 0
          },
          "trn" : {
            "type" : "string",
            "example" : ""
          },
          "excise_trn" : {
            "type" : "string",
            "example" : ""
          },
          "tax_groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxGroup"
            }
          }
        }
      },
      "TaxGroup" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 6
          },
          "rate" : {
            "type" : "integer",
            "example" : 5
          },
          "sales_gl_code" : {
            "type" : "integer",
            "example" : 2171
          },
          "purchasing_gl_code" : {
            "type" : "integer",
            "example" : 2171
          },
          "name" : {
            "type" : "string",
            "example" : "standard rate"
          },
          "inactive" : {
            "type" : "integer",
            "example" : 0
          },
          "tax_category_id" : {
            "type" : "integer",
            "example" : 1
          },
          "description" : {
            "type" : "string",
            "example" : ""
          },
          "tax_code" : {
            "type" : "integer",
            "example" : 1
          },
          "tax_code_description" : {
            "type" : "string",
            "example" : ""
          },
          "tax_shipping" : {
            "type" : "integer",
            "example" : 0
          }
        }
      },
      "Allocation" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "integer",
            "description" : "Type of transaction, for example 10 for sales invoice",
            "example" : 10
          },
          "trans_no" : {
            "type" : "integer",
            "example" : 54
          },
          "branch_code" : {
            "type" : "integer",
            "example" : 2
          },
          "reference" : {
            "type" : "string",
            "example" : "042/2019"
          },
          "tran_date" : {
            "type" : "string",
            "example" : "2019-12-31"
          },
          "DebtorName" : {
            "type" : "string",
            "example" : "John"
          },
          "debtor_ref" : {
            "type" : "string",
            "example" : "john ref"
          },
          "curr_code" : {
            "type" : "string",
            "example" : "AED"
          },
          "Total" : {
            "type" : "number",
            "description" : "Total amount of payment",
            "example" : 11.55
          },
          "alloc" : {
            "type" : "number",
            "description" : "Allocated amount from the payment",
            "example" : 11.5
          },
          "due_date" : {
            "type" : "string",
            "example" : "2020-10-10"
          },
          "address" : {
            "type" : "string",
            "example" : ""
          },
          "settled" : {
            "type" : "integer",
            "example" : 1
          },
          "debtor_no" : {
            "type" : "integer",
            "example" : 2
          },
          "rate" : {
            "type" : "integer",
            "example" : 5
          }
        }
      },
      "RefundCustomerPayment" : {
        "required" : [ "bank_account", "reund_date" ],
        "type" : "object",
        "properties" : {
          "bank_account" : {
            "type" : "integer",
            "description" : "Refund Bank Account",
            "example" : 22
          },
          "refund_date" : {
            "type" : "string",
            "description" : "Refund date",
            "format" : "date"
          }
        }
      },
      "ItemTaxType" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Id of the item tax type",
            "example" : 1
          },
          "name" : {
            "type" : "string",
            "example" : "Standard Rated"
          },
          "exempt" : {
            "type" : "integer",
            "example" : 0
          },
          "taxes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxType"
            }
          }
        }
      },
      "TaxType" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "Standard Rated"
          },
          "tax_type_id" : {
            "type" : "integer",
            "example" : 1
          },
          "rate" : {
            "type" : "integer",
            "example" : 5
          }
        }
      },
      "BankAccount" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 11
          },
          "account_type" : {
            "type" : "integer",
            "example" : 0
          },
          "account_code" : {
            "type" : "integer",
            "example" : 5293
          },
          "bank_account_name" : {
            "type" : "string",
            "example" : "ABCB Credit Card"
          },
          "bank_name" : {
            "type" : "string",
            "example" : "ADCB"
          },
          "bank_account_number" : {
            "type" : "string",
            "example" : "xxxx2232"
          },
          "bank_curr_code" : {
            "type" : "string",
            "example" : "USD"
          },
          "bank_address" : {
            "type" : "string",
            "example" : "Dubai"
          },
          "dflt_curr_act" : {
            "type" : "integer",
            "example" : 1
          }
        }
      },
      "SalesKit" : {
        "required" : [ "category", "components", "description", "kit_code" ],
        "type" : "object",
        "properties" : {
          "kit_code" : {
            "type" : "string",
            "example" : "TMT"
          },
          "description" : {
            "type" : "string",
            "example" : ""
          },
          "category" : {
            "type" : "string",
            "example" : "56"
          },
          "components" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SalesKit_components"
            }
          }
        }
      },
      "Accruals" : {
        "required" : [ "acc_act", "amount", "date_", "freq", "periods", "res_act" ],
        "type" : "object",
        "properties" : {
          "date_" : {
            "type" : "string",
            "example" : "2021/11/26"
          },
          "amount" : {
            "type" : "integer",
            "example" : 5000
          },
          "periods" : {
            "type" : "integer",
            "example" : 4
          },
          "freq" : {
            "type" : "integer",
            "example" : 2
          },
          "memo_" : {
            "type" : "string",
            "example" : "accrual description"
          },
          "acc_act" : {
            "type" : "string",
            "example" : "1152"
          },
          "res_act" : {
            "type" : "string",
            "example" : "1161"
          },
          "dimenstion_id" : {
            "type" : "integer",
            "example" : 5
          },
          "dimension2_id" : {
            "type" : "integer",
            "example" : 32
          }
        }
      },
      "Depreciation" : {
        "required" : [ "months", "stock_id" ],
        "type" : "object",
        "properties" : {
          "stock_id" : {
            "type" : "string",
            "example" : "3457890"
          },
          "months" : {
            "type" : "integer",
            "example" : 2
          },
          "memo_" : {
            "type" : "string",
            "example" : "memo about depreciation process"
          }
        }
      },
      "ShowGLRows" : {
        "required" : [ "months", "stock_id" ],
        "type" : "object",
        "properties" : {
          "stock_id" : {
            "type" : "string",
            "example" : "3457890"
          },
          "months" : {
            "type" : "integer",
            "example" : 2
          },
          "memo_" : {
            "type" : "string",
            "example" : "memo"
          }
        }
      },
      "CustomerMulti_inner" : {
        "required" : [ "address", "bank_account", "credit_status", "curr_code", "cust_ref", "name", "payment_terms", "sales_type", "shopifyID", "tax_group_id", "tax_id" ],
        "properties" : {
          "shopifyID" : {
            "type" : "string",
            "example" : "SFAFJ@#@@@KFK@@@2234"
          },
          "name" : {
            "type" : "string",
            "example" : "tmt negm"
          },
          "address" : {
            "type" : "string",
            "example" : "tmt address"
          },
          "curr_code" : {
            "type" : "string",
            "example" : "AED"
          },
          "bank_account" : {
            "type" : "string",
            "example" : "1234"
          },
          "phone" : {
            "type" : "string",
            "example" : "11218532"
          },
          "phone2" : {
            "type" : "string",
            "example" : "11218532"
          },
          "email" : {
            "type" : "string",
            "example" : "mcledger@mcledger.com"
          },
          "cust_ref" : {
            "type" : "string",
            "description" : "customer reference must be unique each time",
            "example" : "reftmt992a"
          },
          "sales_type" : {
            "type" : "string",
            "description" : "price before/after tax",
            "example" : "2"
          },
          "payment_terms" : {
            "type" : "string",
            "description" : "cash only  , after 15 day  , on account",
            "example" : "4"
          },
          "tax_group_id" : {
            "type" : "integer",
            "description" : "Tax sub location id, it's FTA related.",
            "example" : 2
          }
        }
      },
      "ItemMulti_inner" : {
        "properties" : {
          "stock_id" : {
            "type" : "string",
            "description" : "represent the id of the item but it can be string",
            "example" : "778958"
          },
          "description" : {
            "type" : "string",
            "description" : "name of the item",
            "example" : "tmt-item-name"
          },
          "long_description" : {
            "type" : "string",
            "description" : "description for item",
            "example" : "long description for item"
          },
          "category_id" : {
            "type" : "integer",
            "description" : "item category for ex:(product , oil service ... )",
            "example" : 26
          },
          "sales_prices" : {
            "type" : "array",
            "description" : "Currency code for the supplier",
            "items" : {
              "$ref" : "#/components/schemas/SalesPricing"
            }
          }
        }
      },
      "UpdateMultiItem_inner" : {
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "name of the item",
            "example" : "tmt-item-name"
          },
          "long_description" : {
            "type" : "string",
            "description" : "description for item",
            "example" : "long description for item"
          },
          "category_id" : {
            "type" : "integer",
            "description" : "item category for ex:(product , oil service ... )",
            "example" : 26
          },
          "sales_prices" : {
            "type" : "array",
            "description" : "Currency code for the supplier",
            "items" : {
              "$ref" : "#/components/schemas/SalesPricing"
            }
          }
        }
      },
      "SalesKit_components" : {
        "properties" : {
          "code" : {
            "example" : 31
          },
          "quanitiy" : {
            "example" : 2
          }
        }
      }
    },
    "requestBodies" : {
      "Supplier" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Supplier"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "TokenSecured" : {
        "type" : "apiKey",
        "name" : "AUTH-TOKEN",
        "in" : "header"
      },
      "X-PREFIX" : {
        "type" : "apiKey",
        "name" : "X-PREFIX",
        "in" : "header"
      }
    }
  }
}