openapi: 3.0.0
info:
  description: |
    # Intoduction
     FrontAccounting is an open source ERP system , the following apis are a simulation to the erp behaviour but via API requests
     # Authorization
      FA is coupled with another system (RMS) to request any api we must have 2 things in the header `X-PREFIX` , `AUTH-TOKEN`
        `X-PREFIX`
          FA use prefix to identifie any company so we first need to pass that prefix in the Header 
        `AUTH-TOKEN`
          is RMS bearer token generate from login to rms via main user account to retrieve one please call the following link ` http://104.248.161.120/rms/api/v2/login
          with body : {
                     "email": "cybersales@cyberaccounting.ae",
                     "password": "sales@2019"
                  }
          `
  version: 1.0.0-oas3
  title: Frontaccounting API
  contact:
    email: talaatmedhat19@gmail.com
servers:
  - url: http://localhost:3001/modules/apiv2/
    description: localhost url
  - url: http://104.248.161.120/frontaccounting/modules/apiv2/
    description: staging server url
  - url: https://erp.mcledger.co/modules/apiv2/
    description: production server
tags:
  - name: Company
    description: Company operations , create - update - list ..etc
  - name: Customers
    description: All the operation require to manipulate customer module
  - name: Customer Payment
    description: All the operation require to manipulate customer payment
  - name: Suppliers
    description: All the operation require to manipulate supplier module
  - name: Items
    description: All the operation require to manipulate Items module
  - name: Logger
    description: >-
      All the operation require to manipulate system log in FA ( note this log
      only works with api requests and it logs in 2 level DB and file )
  - name: Sales
    description: All the operation require to manipulate sales module
  - name: Void
    description: Void Transaction is like deleteing one in FA
  - name: Dashboard
    description: Some statistic apis
  - name: Settings
    description: getting FA setting required by the api caller
  - name: Scripts
    description: >-
      it's just a group of apis used to generate mysql query to do some
      manipulation on existing records in the db
  - name: PWP-REQUESTS
    description: >-
      it's a new table generated by us to track the rms operation , what we do
      here is update and retrieve from that table
  - name: Sales Pricing
    description: All the operation require to manipulate Sales Pricing module
  - name: Sales Order
    description: All the operation require to manipulate Sales Order module
  - name: Reports
    description: >-
      some modified reports in fa and some reports just converted into api
      withput modification
  - name: Modules
    description: >-
      Modules represent the FA supported modules transaction like sales ,
      purchase ...etc
  - name: Salesman
    description: All the operation require to manipulate Salesman module
  - name: Customer Credit Note
    description: All the operation require to manipulate Customer Credit Note module
  - name: Purchase
    description: All the operation require to manipulate Purchase module
  - name: Delivery Note
    description: All the operation require to manipulate Delivery Note module
  - name: Accounts
    description: All the operation require to manipulate Accounts module
  - name: Sales Kit
    description: All the operation require to manipulate Sales Kit
  - name: Currency
    description: All the operation require to manipulate Currency
paths:
  /company:
    get:
      tags:
        - Company
      summary: Get Company Setup
      description: get sales_types , fiscal years , current fiscal year
      operationId: companySetup
      responses:
        '200':
          description: Get Company Basic Setups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanySetup'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    post:
      tags:
        - Company
      summary: Create New Company
      description: >
        create a new company in FA , it's append the new caredentials in
        config_db.php and create a new tables with the last prefix exist plus 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
        description: COMPANY BODY DATA
        required: true
      responses:
        '201':
          description: Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '412':
          description: Invalid Inputs
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorCreateCompany'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/templates:
    get:
      tags:
        - Company
      summary: Get Company Sql Templates
      description: get company templates , templates that create the structure of a company
      operationId: companytemplates
      responses:
        '200':
          description: Get ERP Supported Templates.
          content:
            application/json:
              schema:
                $ref: '#/responses/ERPTemplates'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/invoice/state:
    get:
      tags:
        - Company
      summary: Get Company Invoice State
      description: get company templates , templates that create the structure of a company
      operationId: companyInvoiceState
      responses:
        '200':
          description: Get State Of Invoice App, if it supported in this company or not.
          content:
            application/json:
              schema:
                $ref: '#/responses/InvoiceAppState'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/update:
    post:
      tags:
        - Company
      summary: Update Company Templates id and color.
      description: update company template used to preview transactions and it's color
      operationId: updateCompany
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdateData'
        description: template_id and color
      responses:
        '200':
          description: Update Company Data, things like color and invoice view template
          content:
            application/json:
              schema:
                $ref: '#/responses/UpdateCompany'
        '412':
          description: Invalid Data
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/all:
    get:
      tags:
        - Company
      summary: Get All Companies.
      description: Get All Companies, name and prefix.
      operationId: allCompanies
      responses:
        '200':
          description: Get company name and prefix.
          content:
            application/json:
              schema:
                $ref: '#/responses/AllCompanies'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/invoice/state_multi:
    post:
      tags:
        - Company
      summary: Update Invoice State In Multi Companies.
      description: Update invoice state enabled or disabled in multiple companies at once.
      operationId: updateMultiInvoiceState
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdateMultiInvoiceState'
        description: Group of Company Prefixes.
      responses:
        '200':
          description: Response of updating invoice state in multiple companies all at once.
          content:
            application/json:
              schema:
                $ref: '#/responses/CompanyUpdateMultiInvoiceState'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/expenses/state:
    get:
      tags:
        - Company
      summary: Get Company Expenses State.
      description: Get company expenses state, 1 for enabled , 0 for disabled.
      operationId: companyExpensesState
      responses:
        '200':
          description: Get State Of Expenses, if it supported in this company or not.
          content:
            application/json:
              schema:
                $ref: '#/responses/InvoiceAppState'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/inventory-valuation/state:
    get:
      tags:
        - Company
      summary: Show Inventory Valuation State.
      description: Get Inventory Valuation State, 1 for enabled , 0 for disabled.
      operationId: companyValuationState
      responses:
        '200':
          description: Get State Of Inventory Valuation, if it supported in this company or not.
          content:
            application/json:
              schema:
                $ref: '#/responses/InvoiceAppState'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/invoice/reminders:
    get:
      tags:
        - Company
      summary: Get Invoice Reminders.
      description: Get Invoice Reminders
      operationId: companyInvoiceReminders
      responses:
        '200':
          description: Response of the invoices reminders
          content:
            application/json:
              schema:
                $ref: '#/responses/InvoiceAppState'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/validate-reference:
    get:
      tags:
        - Company
      summary: Validate Reference To Specific Transaction Type And Specific Transaction Number.
      description: Validate reference for transaction with specific type and number.
      operationId: companyValidateReference
      parameters:
        - name: ref
          in: query
          description: reference to be tested
          required: true
          schema:
            type: string
          example: 002/1220
        - name: type
          in: query
          description: Transaction Type, for example 10 for sales invoice.
          required: true
          schema:
            type: integer
          example: 10
        - name: trans_no
          in: query
          description: Transaction Number.
          required: true
          schema:
            type: integer
          example: 214
      responses:
        '200':
          description: Response if the reference is valid
          content:
            application/json:
              schema:
                $ref: '#/responses/CompanyValidReference'
        '412':
          description: Invalid Reference Response
          content:
            application/json:
              schema:
                $ref: '#/responses/CompanyInvalidReference'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /company/invoice/reminders/settings:
    post:
      tags:
        - Company
      summary: Update Invoice Reminders Settings.
      description: Update invoice reminders settings, hours reminder first and second date...
      operationId: updateInvoiceRemindersSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyReminderSettings'
        description: Invoice Reminder Settings.
      responses:
        '200':
          description: Response of updating invoice reminder settings.
          content:
            application/json:
              schema:
                $ref: '#/responses/InvoiceReminderSettings'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/responses/InvoiceReminderNotActive'                
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /customers:
    get:
      tags:
        - Customers
      summary: Get All Customers.
      description: Get list of the customers.
      operationId: getCustomers
      parameters:
        - name: debtor
          in: query
          description: customer id filter
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: pagination value , compine with limit
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: how many each page should support
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: sort_by
          in: query
          description: sort by specific column in customers table for example debtor_no
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Customer List Response
          content:
            application/json:
              schema:
                $ref: '#/responses/CustomersList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    post:
      tags:
        - Customers
      summary: Add New Customer With Default Branch.
      description: Add new customer with default branch
      operationId: addCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        description: name and address  , ...tc
      responses:
        '201':
          description: Customer Response After Success Creation
          content:
              application/json:
                schema:
                  $ref: '#/responses/CreateCustomer'
        '412':
          description: Precondition failed while insert new customer.
          content:
              application/json:
                schema:
                  $ref: '#/responses/FailedCreateCustomer'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /customers/{customer_id}:
    get:
      tags:
        - Customers
      summary: Show Customer.
      description: Show customer details.
      operationId: getCustomer
      parameters:
        - name: customer_id
          in: path
          description: debtor_no in the db
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer Details Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/ShowCustomer'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    put:
      tags:
        - Customers
      summary: Update Customer
      description: update customer data
      operationId: updateCustomer
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        description: customer data body
      responses:
        '200':
          description: Updated Customer Details Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/ShowCustomer'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /customers/{customer_id}/invoices:
    get:
      tags:
        - Customers
      summary: Get All Customer Invoices.
      description: >-
        get sales invoices created for this customer with it's allocations
        (customer payments)
      operationId: getCustomerInvoices
      parameters:
        - name: customer_id
          in: path
          description: debtor_no in the db
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: sales invoices
          content:
            application/json:
              schema:
                $ref: '#/responses/CustomerInvoices'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /customers/names:
    get:
      tags:
        - Customers
      summary: Get All Customers Names.
      description: Get customers names with reference and 
      operationId: getCustomerNames
      responses:
        '200':
          description: Customer Names List Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/CustomerNames'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /customers/multi:  
    post:
      tags:
        - Customers
      summary: Add Multiple Customers.
      description: Add new customers, this api used mainly by shopify 
      operationId: addMultiCustomers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerMulti'
        description: Multiple Customers
      responses:
        '201':
          description: Customer Response After Success Creation
          content:
              application/json:
                schema:
                  $ref: '#/responses/CreateMultiCustomer'
        '412':
          description: Precondition failed while insert new customer.
          content:
              application/json:
                schema:
                  $ref: '#/responses/FailedCreateCustomer'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []  
  /customers/allocations:
    get:
      tags:
        - Customer Payment
        - Customer Credit Note
      summary: Get all Customer Payments.
      description: >-
        get all the customer payments  , it's also retrieve the Credit Notes
        with it
      operationId: getCustomerPayments
      parameters:
        - name: page
          in: query
          description: pagination value , compine with limit
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: how many each page should support
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: keyword
          in: query
          description: search value
          required: false
          schema:
            type: string
        - name: tran_date_from
          in: query
          description: from transaction date of the customer payment
          required: false
          schema:
            type: string
            format: date
        - name: tran_date_to
          in: query
          description: to transaction date of the customer payment
          required: false
          schema:
            type: string
            format: date
        - name: type
          in: query
          description: type of the transaction 11 => credit note  12 => customer payment
          required: false
          schema:
            type: integer
        - name: item_id
          in: query
          description: filter by item , item_id here represent the stock_id
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Customer Payments Response.
          content:
              application/json:
                schema:
                  $ref: '#/responses/CustomerPayments'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales/receipt/{payment_no}:
    get:
      tags:
        - Customer Payment
      summary: Show Customer Payment
      description: view specific customer payment
      operationId: showCustomerPayment
      parameters:
        - name: payment_no
          in: path
          description: payment_no represent the trans_no of the customer payment
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer Payment Details Response.
          content:
              application/json:
                schema:
                  $ref: '#/responses/CustomerPaymentsDetails'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales/print/receipt/{payment_no}:
    get:
      tags:
        - Customer Payment
      summary: Print Receipt Template.
      description: This api return an html view without any body just html
      operationId: printReceipt
      parameters:
        - name: payment_no
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response must be an html.
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales/customer_payment/reference/get:
    get:
      tags:
        - Customer Payment
      summary: Get next available customer payment reference.
      description: Get the next unique reference to insert new customer payment with
      operationId: getCustomerNextPaymentReference
      responses:
        '200':
          description: OK
          content:
              application/json:
                schema:
                  $ref: '#/responses/CustomerPaymentsReference'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales/customer_payment:
    post:
      tags:
        - Customer Payment
      summary: Add New Customer Payment
      description: >-
        Create New Customer payment , take care in this api we can do both
        create customer payment and allocate to sales invoices , if we would
        like
      operationId: addCustomerPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomerPayment'
        description: payment details
      responses:
        '200':
          description: Customer Payment Creation Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/CreateCustomerPayments'
        '412':
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: '#/responses/FailedCustomerPayment'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales/allocate-customer:
    post:
      tags:
        - Customer Payment
        - Customer Credit Note
      summary: Allocate amounts from customer payment/credit note to invoice.
      description: >-
        Allocate amounts from customer payments/credit note to 1 invoice or
        multiple invoices
      operationId: allocateCustomerPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllocateCustomerPayment'
        description: Allocate payment details
      responses:
        '200':
          description: Allocate Customer Payment Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/AllocateCustomerPayment'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /customers/refund/{payment_no}:
    post:
      tags:
        - Customer Payment
      summary: Refund Customer Payment.
      description: Refund Customer Payment.
      operationId: refundCustomerPayment
      parameters:
          - name: payment_no
            in: path
            required: true
            schema:
              type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundCustomerPayment'
        description: Allocate payment details
      responses:
        '200':
          description: Allocate Customer Payment Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/RefundCustomerPayment'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /suppliers:
    get:
      tags:
        - Suppliers
      summary: Get all suppliers
      description: Return list of available suppliers
      operationId: getSuppliers
      parameters:
        - name: order
          in: query
          description: order by DESC or ASCE  with supplier id
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: pagination value , compine with limit
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: how many each page should support
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        '200':
          description: Get suppliers response.
          content:
            application/json:
              schema:
                $ref: '#/responses/SuppliersList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    post:
      tags:
        - Suppliers
      summary: Add New Supplier
      description: add new supplier
      operationId: addSupplier
      requestBody:
        $ref: '#/components/requestBodies/Supplier'
      responses:
        '201':
          description: Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '412':
          description: invalid data
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /suppliers/{supplier_id}:
    get:
      tags:
        - Suppliers
      summary: View Single Supplier
      description: View Supplier by id
      operationId: showSupplier
      parameters:
        - name: supplier_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get supplier details response.
          content:
            application/json:
              schema:
                $ref: '#/responses/SuppliersList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    put:
      tags:
        - Suppliers
      summary: Update Supplier
      description: >-
        Update Supplier u need to add person_id with it's person id to update
        him
      operationId: updateSupplier
      parameters:
        - name: supplier_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Supplier'
      responses:
        '200':
          description: Updated Successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /inventory:
    get:
      tags:
        - Items
      summary: Get Items List.
      description: Return all the items supported for the company.
      operationId: getItems
      parameters:
        - name: order
          in: query
          description: order by DESC or ASC  with supplier id
          required: false
          schema:
            type: string
        - name: category_id
          in: query
          description: filter by category
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: pagination value , compine with limit
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: how many each page should support
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        '200':
          description: Items List Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/ItemsList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    post:
      tags:
        - Items
      summary: Create New Item
      description: Create New Item
      operationId: addItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Item Created Successfully Response
          content:
            application/json:
              schema:
                $ref: '#/responses/CreateItems'
        '412':
          description: Precondition Failed.
          content:
            application/json:
              schema:
                $ref: '#/responses/FailedCreateItem'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /inventory/{stock_id}:
    get:
      tags:
        - Items
      summary: Show Item Details.
      description: Return item details
      operationId: getItem
      parameters:
        - name: stock_id
          in: path
          description: item details
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Items List Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDetails'
        '412':
          description: invalid data
      security:
        - TokenSecured: []
        - X-PREFIX: []
    put:
      tags:
        - Items
      summary: Update Item
      description: Update Item
      operationId: updateItem
      parameters:
        - name: stock_id
          in: path
          description: item details
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItem'
      responses:
        '200':
          description: Items List Updated Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDetails'
          
        '412':
          description: Precondition Failed.
          content:
            application/json:
              schema:
                $ref: '#/responses/FailedCreateItem'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /inventory/item-tax-types:
    get:
      tags:
        - Items
      summary: Get System Item Tax Types.
      description: Return all the item tax types.
      operationId: getItemTaxTypes
      responses:
        '200':
          description: Items List Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/ItemTaxTypes'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /inventory/multi:
    post:
        tags:
          - Items
        summary: Create Multiple Items.
        description: Create Multiple Items At Once.
        operationId: addMultiItems
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemMulti'
        responses:
          '201':
            description: Item Created Successfully Response
            content:
              application/json:
                schema:
                  $ref: '#/responses/CreateItems'
          '412':
            description: Precondition Failed.
            content:
              application/json:
                schema:
                  $ref: '#/responses/FailedCreateItem'
        security:
          - TokenSecured: []
          - X-PREFIX: []
    put:
        tags:
          - Items
        summary: Update Multiple Items.
        description: Update Multiple Items At Once.
        operationId: updateMultiItems
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMultiItem'
        responses:
          '201':
            description: Item Updated Successfully Response
            content:
              application/json:
                schema:
                  $ref: '#/responses/CreateItems'
          '412':
            description: Precondition Failed.
            content:
              application/json:
                schema:
                  $ref: '#/responses/FailedCreateItem'
        security:
          - TokenSecured: []
          - X-PREFIX: []
  /log:
    get:
      tags:
        - Logger
      summary: Show Logs.
      description: >-
        show logs on the api level only , any transaction made by api would
        belogged in the db table so we can retrieve it
      operationId: getLogs
      parameters:
        - name: page
          in: query
          description: pagination value , compine with limit
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: how many each page should support
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: user_id
          in: query
          description: filter by user
          required: false
          schema:
            type: integer
        - name: trans_no
          in: query
          description: >-
            filter by transaction number  , it will return all the logs happend
            on that trans
          required: false
          schema:
            type: integer
        - name: trans_type
          in: query
          description: filter by transaction type , sales , purchase ..etc
          required: false
          schema:
            type: integer
        - name: user_email
          in: query
          description: filter by user email
          required: false
          schema:
            type: string
        - name: action
          in: query
          description: filter by action ( GET , POST , PUT , DELETE )
          required: false
          schema:
            type: string
        - name: attempt
          in: query
          description: failed transaction or success one  ( 0 | 1)
          required: false
          schema:
            type: integer
        - name: action_timestamp_from
          in: query
          description: the timestamp of the action from range
          required: false
          schema:
            type: string
            format: date
        - name: action_timestamp_to
          in: query
          description: the timestamp of the action to range
          required: false
          schema:
            type: string
            format: data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/Logs'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales/10:
    get:
      tags:
        - Sales
      summary: Get all sales invoices.
      description: get all sales invoices.
      operationId: getSalesInvoices
      parameters:
        - name: page
          in: query
          description: pagination value , compine with limit
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: how many each page should support
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: keyword
          in: query
          description: search value , search in customer name , reference , branch
          required: false
          schema:
            type: string
        - name: customer_id
          in: query
          description: filter by customer that sales invoices created for
          required: false
          schema:
            type: integer
        - name: paid
          in: query
          description: filter whether the invoice paid or not
          required: false
          schema:
            type: integer
        - name: item_id
          in: query
          description: filter by invoice items
          required: false
          schema:
            type: integer
        - name: tran_date_from
          in: query
          description: invoice transaction date from range
          required: false
          schema:
            type: string
            format: date
        - name: tran_date_to
          in: query
          description: transaction invoice date to range
          required: false
          schema:
            type: string
            format: data
        - name: due_date_from
          in: query
          description: the invoice from due date if it's not prepaid
          required: false
          schema:
            type: string
            format: date
        - name: due_date_to
          in: query
          description: the invoice to due date if it's not prepaid
          required: false
          schema:
            type: string
            format: data
      responses:
        '200':
          description: Invoice Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/SalesInvoiceList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales/{trans_no}/10:
    get:
      tags:
        - Sales
      summary: Show Sales Invoice.
      description: Show sales invoice details.
      operationId: getSalesInvoice
      parameters:
        - name: trans_no
          in: path
          description: the invoice to due date if it's not prepaid
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Invoice Response.
          content:
            application/json:
              schema:
                $ref: '#/responses/SalesInvoiceList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales/print_preview/{trans_no}:
    get:
      tags:
        - Sales
      summary: Print Sales Invoice As HTML.
      description: Return html of the printed invoice , only html without body
      operationId: printSalesInvoice
      parameters:
        - name: trans_no
          in: path
          description: the invoice to due date if it's not prepaid
          required: true
          schema:
            type: integer
        - name: template_id
          in: query
          description: we support 3 templates with 3 ids each one has a defierent design
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The response is in a form of HTML.
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales:
    post:
      tags:
        - Sales
      summary: Create New Sales Invoice.
      description: Responsible of sales invoice creation
      operationId: createSalesInvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesInvoice'
        description: Invoice creation data
      responses:
        '200':
          description: Sales Invoice Created Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInvoice'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /salescontrol/auto-sales-invoice:
    post:
      tags:
        - Sales
      summary: Create a sales invoice by robo accountant
      description: >-
        the main aim of this api is to create transaction in FA using OCR
        process on request in rms
      operationId: roboSalesInvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoboSalesInvoice'
        description: Robo Invoice creation data
      responses:
        '200':
          description: Auto SalesInvoice Created Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInvoice'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /void:
    post:
      tags:
        - Void
      summary: Create a sales invoice by robo accountant
      description: >-
        the main aim of this api is to create transaction in FA using OCR
        process on request in rms
      operationId: voidTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidTransaction'
        description: Robo Invoice creation data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/Void'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /void/is-voided:
    post:
      tags:
        - Void
      summary: Is Transaction Voided ?
      description: check if group of transactions voided or not
      operationId: isTransVoided
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/isTransactionVoided'
        description: Robo Invoice creation data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/Void'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /salescontrol/sales-order:
    post:
      tags:
        - Sales Order
      summary: Create Sales Order
      description: create sales order
      operationId: createSalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrder'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInvoice'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /salescontrol/sales-orders:
    get:
      tags:
        - Sales Order
      summary: Get all sales orders
      description: get all sales orders with type 30
      operationId: getSalesOrders
      parameters:
        - name: page
          in: query
          description: pagination value , compine with limit
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: how many each page should support
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: keyword
          in: query
          description: search value , search in customer name , reference , branch
          required: false
          schema:
            type: string
        - name: customer_id
          in: query
          description: filter by customer that sales invoices created for
          required: false
          schema:
            type: integer
        - name: item_id
          in: query
          description: filter by invoice items
          required: false
          schema:
            type: integer
        - name: order_date_from
          in: query
          description: invoice transaction date from range
          required: false
          schema:
            type: string
            format: date
        - name: order_date_to
          in: query
          description: transaction invoice date to range
          required: false
          schema:
            type: string
            format: data
        - name: delivery_date_from
          in: query
          description: the invoice from due date if it's not prepaid
          required: false
          schema:
            type: string
            format: date
        - name: delivery_date_to
          in: query
          description: the invoice to due date if it's not prepaid
          required: false
          schema:
            type: string
            format: data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/SalesInvoiceList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /salescontrol/sales-order/{trans_no}:
    get:
      tags:
        - Sales Order
      summary: show sales orders
      description: get all sales orders with type 30
      operationId: showSalesOrder
      parameters:
        - name: trans_no
          in: path
          description: order number
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/SalesInvoiceList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    put:
      tags:
        - Sales Order
      summary: update sales order
      description: update sales order
      operationId: updateSalesOrder
      parameters:
        - name: trans_no
          in: path
          description: order number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSalesOrder'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInvoice'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    delete:
      tags:
        - Sales Order
      summary: cancel sales order
      description: cancel sales order is like deleting it
      operationId: cancelSalesOrder
      parameters:
        - name: trans_no
          in: path
          description: order number
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/DeleteSalesOrder'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /salescontrol/sales-order/print-preview/{trans_no}:
    get:
      tags:
        - Sales Order
      summary: Print Sales Order
      description: >-
        return html of the sales order , depend on tempate_id default value for
        template_id = 1
      operationId: printSalesOrder
      parameters:
        - name: template_id
          in: query
          description: sales order support 3 templates , from 1 - 3
          required: false
          schema:
            type: integer
        - name: trans_no
          in: path
          description: order number
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /salescontrol/sales-order/invoice/{trans_no}:
    post:
      tags:
        - Sales Order
      summary: Invoice Sales Order
      description: >-
        transfer sales order to sales invoice , there's step in the middle
        tarnsfer sales order -> delivery note -> sales invoice , but we
        implicity do the second step
      operationId: invoiceSalesOrder
      parameters:
        - name: trans_no
          in: path
          description: order number
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/InvoiceSalesOrder'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /dashboard:
    get:
      tags:
        - Dashboard
      summary: Get Dashboard Report.
      description: get top customers/suppliers/gl/receipts/sales/purchase ..etc
      operationId: getDashboard
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/Dashboard'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /dashboard/tags-balances:
    get:
      tags:
        - Dashboard
      summary: Get Tags Balance
      description: get tags balance report , this api need procuder to run
      operationId: getTagsBalance
      parameters:
        - name: company_prefix
          in: query
          description: >-
            company prefix  , i have no idea why we pass the company prefix in
            query param it's already exist in the header.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /dashboard/tags-summary-balances:
    get:
      tags:
        - Dashboard
      summary: Get Summary Balance
      description: get tags balance report , this api need mysql procuder to run
      operationId: getSummaryBalance
      parameters:
        - name: company_prefix
          in: query
          description: >-
            company prefix  , i have no idea why we pass the company prefix in
            query param it's already exist in the header.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /dashboard/tags-top-expenses:
    get:
      tags:
        - Dashboard
      summary: Get Top Expenses
      description: get Top Expenses report , this api need mysql procuder to run
      operationId: getTopExpenses
      parameters:
        - name: company_prefix
          in: query
          description: >-
            company prefix  , i have no idea why we pass the company prefix in
            query param it's already exist in the header.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /dashboard/tags-revenue-expenses:
    get:
      tags:
        - Dashboard
      summary: Get Revenue Expenses
      description: get Top Expenses report , this api need mysql procuder to run
      operationId: getRevenueExpenses
      responses:
        '200':
          description: OK
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /inventory/generalsettings:
    get:
      tags:
        - Settings
      summary: Get General Settings
      description: >-
        get settings of FA , like tax types , accounts , any thing that needed
        in a form
      operationId: getGeneralSettings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/Generalsettings'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /pwp-request:
    get:
      tags:
        - PWP-REQUESTS
      summary: Get PWP Requests.
      description: >-
        pwp requests is a table that tied ub the audit trail id with rms request
        and items , this api take a request_no and retrieve it from the pwp
        request if it exist
      operationId: getPWPRequests
      parameters:
        - name: request_no
          in: query
          description: request number of the rms requests , that we need to fetch
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/PWPRequests'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /pwp-request/{item_no}:
    put:
      tags:
        - PWP-REQUESTS
      summary: Get General Settings.
      description: >-
        pwp requests is a table that tied ub the audit trail id with rms request
        and items , this api update pwp requests fields
      operationId: updatePWPRequests
      parameters:
        - name: item_no
          in: path
          description: item no of the rms , that we need to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePWPRequests'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/UpdatePWPRequests'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales-pricing:
    post:
      tags:
        - Sales Pricing
      summary: Create Sales Pricing.
      description: sales pricing of specific item
      operationId: createSalesPricing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSalesPricing'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/SalesPricing'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales-pricing/{id}:
    put:
      tags:
        - Sales Pricing
      summary: Update Sales Pricing.
      description: update sales pricing of specific item
      operationId: updateSalesPricing
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSalesPricing'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/UpdateSalesPricing'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /reporting/vat-return:
    get:
      tags:
        - Reports
      summary: Vat Return Report.
      description: return vat return
      operationId: vatReturnReport
      parameters:
        - name: from_date
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/VatReturnReport'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /salescontrol/total/report:
    get:
      tags:
        - Reports
      summary: Total Paid/Unpaid invoices report.
      description: total paid and unpaid invoices report
      operationId: totalPaidUnpaidReports
      parameters:
        - name: from_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/TotalPaidReport'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /reporting/balance-sheet:
    post:
      tags:
        - Reports
      summary: Balance Sheet.
      description: Balance Sheet Report
      operationId: balanceSheet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/VatReturnReport'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /reporting/profit-loss:
    get:
      tags:
        - Reports
      summary: Profit & Loss.
      description: Profit & Loss report
      operationId: profitLoss
      responses:
        '200':
          description: OK
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /report/account-statement:
    get:
      tags:
        - Reports
      summary: Account Statment Report
      description: >-
        Account statment report , api takes from/to date and the account number
        we want to get it's statment
      operationId: accountStatment
      parameters:
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: account
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/VatReturnReport'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /report/aged-customer:
    get:
      tags:
        - Reports
      summary: Aged Customer Analysis.
      description: Aged Customer Analysis Report
      operationId: agedCustomerAnalysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/VatReturnReport'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /report/aged-supplier:
    get:
      tags:
        - Reports
      summary: Aged Supplier Analysis
      description: Aged Supplier Analysis Report
      operationId: agedSupplierAnalysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/VatReturnReport'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /report/sales:
    get:
      tags:
        - Reports
      summary: Sales Report
      description: >-
        Sales Report , report for all the sales module , sales order/invoice ,
        delivery note ...etc , with the following supported filters in the query
        param
      operationId: salesReport
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: item_id
          in: query
          description: stock_id of the items table
          required: false
          schema:
            type: string
        - name: trans_type
          in: query
          description: >-
            transaction type , could be sales invoice (10) , sales order (30) ,
            credit note (11) , customer payment (12)
          required: false
          schema:
            type: string
        - name: customer_id
          in: query
          description: filter by customer id
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/VatReturnReport'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /report/purchase:
    get:
      tags:
        - Reports
      summary: Purchase Report
      description: Purchase Report
      operationId: purchaseReport
      parameters:
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/VatReturnReport'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /report/detailed-expense:
    get:
      tags:
        - Reports
      summary: Detailed Expenses Report.
      description: Detailed Expenses Report.
      operationId: detailedExpensesReport
      parameters:
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/VatReturnReport'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /report/detailed-balance:
    get:
      tags:
        - Reports
      summary: Detailed Balance Report
      description: Purchase Report
      operationId: detailedBalanceReport
      parameters:
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/VatReturnReport'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /module/non-gl/{trans_type}:
    get:
      tags:
        - Modules
      summary: Search For specific transaction type in non gl modules
      description: >-
        It's looking for the provided transaction in a json file contains all
        the non gl modules , the non gl modules is the modules that will not be
        populated to the rms
      operationId: searchNonGlModules
      parameters:
        - name: trans_type
          in: path
          description: transaction type of the non gl module
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/AddNonGlModule'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    delete:
      tags:
        - Modules
      summary: Search For specific transaction type in non gl modules
      description: >-
        delete non gl module , delete a transaction type in the json file
        (NonGlModules.json) so the target trans type will  be populated in rms ,
        NonGlModules.json need to have a permission 0644 or 0777s
      operationId: deleteNonGlModule
      parameters:
        - name: trans_type
          in: path
          description: transaction type of the non gl module
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/DeleteNonGlModule'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /module/non-gl:
    get:
      tags:
        - Modules
      summary: Get All Non gl modules
      description: >-
        retrieve all the non gl modules , the non gl modules is the modules that
        will not be populated to the rms
      operationId: getAllNonGlModules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonGLModuleType'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    post:
      tags:
        - Modules
      summary: Add Non Gl Module
      description: >-
        add non gl module , insert a transaction type in the json file
        (NonGlModules.json) so the target trans type won't be populated in rms ,
        NonGlModules.json need to have a permission 0644 or 0777
      operationId: addNonGlModule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NonGLModuleType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/AddNonGlModule'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /module/:
    get:
      tags:
        - Modules
      summary: Get all supported Modules from FA
      description: >-
        get all the supported modules in FA , with it's links in FA also with
        it's transaction type , some modules doesn't have so we create a custom
        number for it , like items/customers/...etc
      operationId: getModules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/Modules'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /salesman/:
    get:
      tags:
        - Salesman
      summary: Get all salesmans with there reports.
      description: >-
        get all salesman with a total report of sales and purchase of each one
        of them did in a specific date, note -> salesman tied ub with branch and
        branch tied up with customer
      operationId: getSalesman
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: from_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: keyword
          in: query
          description: search param in salesman code/name/phone/email
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/Salesman'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    post:
      tags:
        - Salesman
      summary: Create Salesman.
      description: >-
        add a new salesman , note -> salesman tied ub with branch and branch
        tied up with customer
      operationId: createSalesman
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Salesman'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/CreateSalesman'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /salesman/{id}:
    get:
      tags:
        - Salesman
      summary: Show Salesman with it's reports
      description: >-
        show salesman details with a total report of sales and purchase of each
        one of them did in a specific date
      operationId: showSalesman
      parameters:
        - name: id
          in: path
          description: salesman id
          required: true
          schema:
            type: integer
        - name: from_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/SalesmanDetails'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    put:
      tags:
        - Salesman
      summary: Update Salesman.
      description: >-
        update salesman , note -> salesman tied ub with branch and branch tied
        up with customer
      operationId: updateSalesman
      parameters:
        - name: id
          in: path
          description: salesman id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSalesman'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/UpdateSalesman'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /credit-note:
    get:
      tags:
        - Customer Credit Note
      summary: Get ll credit notes
      description: >-
        get all credit notes with type 11 , credit notes is something like
        getting a sales invoice back
      operationId: getallCreditNotes
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: from_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: item_id
          in: query
          description: stock_id of the items table
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/SalesInvoiceList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    post:
      tags:
        - Customer Credit Note
      summary: Create Credit Note
      description: add a new credit note
      operationId: createCreditNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesInvoice'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInvoiceDetails'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales/{trans_no}/11:
    get:
      tags:
        - Customer Credit Note
      summary: Show Credit Note
      description: Show customer credit note details
      operationId: getCustomerCreditNote
      parameters:
        - name: trans_no
          in: path
          description: the invoice to due date if it's not prepaid
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInvoiceDetails'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /credit-note/credit-sales/{invoice_no}:
    post:
      tags:
        - Customer Credit Note
      summary: Create Credit Note
      description: add a new credit note
      operationId: credit invoice
      parameters:
        - name: invoice_no
          in: path
          description: invoice number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditThis'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInvoiceDetails'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /delivery-note:
    get:
      tags:
        - Delivery Note
      summary: Show All Delivery Notes.
      description: get all devlivery notes
      operationId: getDeliveryNotes
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: can_invoice
          in: query
          description: filter by the ability to invoice the develiery notes
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/SalesInvoiceList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []

  /delivery-note/print-preview/{delivery_no}:
    get:
      tags:
        - Delivery Note
      summary: Print Deliviery note.
      description: >-
        print delivery notes , the response will be a form of html wihtout any
        body or code
      operationId: printDeliveryNote
      parameters:
        - name: template_id
          in: query
          description: >-
            fa has 3 templates supported to print any kind of transaction , 1 is
            the default one
          required: false
          schema:
            type: integer
        - name: delivery_no
          in: path
          description: delivery number
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: HTML Response
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /account:
    get:
      tags:
        - Accounts
      summary: Show All Accounts.
      description: Get all accounts
      operationId: getAccounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/BankAccounts'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /user:
    post:
      tags:
        - User
      summary: Create user
      description: >-
        Create user in all companies in FA , accountant user some one who will
        use the system with specific rules , this api generate sql only if you
        would like and can also execute it internal and give you the output , 
        it also update the user data if he exist
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: SQL query for creating
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /scripts/fix-concurrency-script:
    get:
      tags:
        - Scripts
      summary: Supplier Transaction concurrency fix script.
      description: >-
        this api generate a fix script for the duplicated supplier transactions
        ( 2 supp trans has the same trans_no ) the script seperate them into 2
        different transactions so the user can go and voided the new one , and
        use the old one
      operationId: concurrencyFix
      parameters:
        - name: debug
          in: query
          description: >-
            when debug is enabled the api return the sql queries that we need to
            execute , but if it's disable the api execute those queries and
            return the result
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1
      responses:
        '200':
          description: SQL string responses.
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /purchase:
    get:
      tags:
        - Purchase
      summary: Get Purchases Invoices.
      description: Get list of purchases invoices.
      operationId: getPurchases
      parameters:
        - name: page
          in: query
          description: pagination value , compine with limit
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: how many each page should support
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: keyword
          in: query
          description: search value , search in customer name , reference , branch
          required: false
          schema:
            type: string
        - name: supplier_id
          in: query
          description: filter by supplier id
          required: false
          schema:
            type: integer
        - name: from_date
          in: query
          description: Filter with from date
          required: false
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          description: Filter with to date
          required: false
          schema:
            type: string
            format: date
        - name: type
          in: query
          description: Filter with Purchase type -> invoices or orders
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of purchases invoices.
          content:
            application/json:
              schema:
                $ref: '#/responses/PurchaseList'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
    post:
      tags:
        - Purchase
      summary: Add Direct Purchase.
      description: >-
        create new supplier invoice , this api also support robo supplier
        invoice
      operationId: addPurchase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/CreatePurchase'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /purchase/order:
    post:
      tags:
        - Purchase
      summary: Add Purchase Order.
      description: Create new pruchase order
      operationId: addPurchaseOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/CreatePurchase'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /purchase/invoice:
    post:
      tags:
        - Purchase
      summary: Add Purchase Invoice.
      description: Create new purchase invoice not direct invoice.
      operationId: addPurchaseExpense.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/CreatePurchase'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /credit-note-supp:
    post:
      tags:
        - Purchase
      summary: Create Purchase Credit Note.
      description: Create purchase credit note.
      operationId: addPurchaseCreditNote.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/CreatePurchase'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /purchase/print-preview/{trans_no}:
    get:
      tags:
        - Purchase
      summary: Print Purchase Invoice.
      description: Print Purchase Invoice As HTML
      operationId: printPurchaseInvoice.
      parameters:
        - name: trans_no
          in: path
          description: Purchase transaction number.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: HTML Response.
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales_kit/:
    post:
      tags:
        - Sales Kit
      summary: Create Sales Kit.
      description: Create Sales Kit.
      operationId: createSalesKit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesKit'
        description: Sales Kit Request Body.
        required: true
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/responses/CreateSalesKit'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /sales_kit/{kit_code}:
    put:
      tags:
        - Sales Kit
      summary: Update Sales Kit.
      description: Update Sales Kit.
      operationId: updateSalesKit
      parameters:
        - name: kit_code
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesKit'
        description: Sales Kit Request Body.
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/UpdateSalesKit'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []
  /currencies/online-exchange-rate/{curr_code}:
    get:
      tags:
        - Currency
      summary: Get Online Currency Rate.
      description: Get online currency rate, the rate is from the default company currency to the passed curreny
      operationId: getOnlineCurrencyRate
      parameters:
        - name: curr_code
          in: path
          required: true
          example: USD
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/responses/OnlineCurrencyRate'
        '403':
          $ref: '#/responses/403'
      security:
        - TokenSecured: []
        - X-PREFIX: []


components:
  requestBodies:
    Supplier:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Supplier'
  securitySchemes:
    TokenSecured:
      type: apiKey
      name: AUTH-TOKEN
      in: header
    X-PREFIX:
      type: apiKey
      name: X-PREFIX
      in: header
  schemas:
    CompanySetup:
        type: object
        properties:
          sales_types:
            type: array
            items:
              $ref: '#/components/schemas/SalesTypes'
          fiscal_year:
            $ref: '#/components/schemas/FiscalYear' 
          fiscal_years:
            type: array
            items:
              $ref: '#/components/schemas/FiscalYear'
          cur_fiscal_year:
            $ref: '#/components/schemas/FiscalYear'
    Company:
      type: object
      required:
        - coa
        - collation
        - dbname
        - dbuser
        - host
        - name
      properties:
        name:
          type: string
          example: TMT
        port:
          type: string
          example: ''
        tbpref:
          type: string
          example: ''
        password:
          type: string
          example: ''
        host:
          type: string
          example: localhost
        dbname:
          type: string
          example: frontaccounting
        collation:
          type: string
          example: utf8_xx
        dbuser:
          type: string
          example: root
        coa:
          type: string
          example: en_5_BKEmptyCompany.sql
    CompanyUpdateData:
      type: object
      properties:
        inv_template_id:
          type: integer
          example: 1
        inv_color_id:
          type: string
          example: '#fffff'
        pic:
          type: string
          format: file
          description: upload a logo using form data
    Customer:
      type: object
      required:
        - address
        - bank_account
        - curr_code
        - cust_ref
        - name
        - payment_terms
        - sales_type
        - tax_sub_location_id
      properties:
        name:
          type: string
          example: tmt negm
        address:
          type: string
          example: tmt address
        curr_code:
          type: string
          example: AED
        bank_account:
          type: string
          example: '1234'
        phone:
          type: string
          example: 11218532
        phone2:
          type: string
          example: 11218532
        email:
          type: string
          example: 'mcledger@mcledger.com'        
        cust_ref:
          type: string
          example: reftmt992a
          description: customer reference must be unique each time
        sales_type:
          type: string
          example: '1'
          description: price before/after tax
        payment_terms:
          type: string
          example: '4'
          description: cash only  , after 15 day  , on account
        tax_sub_location_id:
          type: integer
          example: 2
          description: Tax sub location id, it's FTA related.
    CustomerMulti:
      type: array
      items:
        required:
          - address
          - bank_account
          - cust_ref
          - name
          - sales_type
          - tax_id
          - curr_code
          - credit_status
          - payment_terms
          - tax_group_id
          - shopifyID
        properties:
          shopifyID:
            type: string
            example: 'SFAFJ@#@@@KFK@@@2234'
          name:
            type: string
            example: tmt negm
          address:
            type: string
            example: tmt address
          curr_code:
            type: string
            example: AED
          bank_account:
            type: string
            example: '1234'
          phone:
            type: string
            example: 11218532
          phone2:
            type: string
            example: 11218532
          email:
            type: string
            example: 'mcledger@mcledger.com'        
          cust_ref:
            type: string
            example: reftmt992a
            description: customer reference must be unique each time
          sales_type:
            type: string
            example: '1'
            description: price before/after tax
          payment_terms:
            type: string
            example: '4'
            description: cash only  , after 15 day  , on account
          tax_group_id:
            type: integer
            example: 2
            description: Tax sub location id, it's FTA related.
    NewCustomerPayment:
      type: object
      required:
        - DateBanked
        - TotalNumberOfAllocs
        - amount
        - bank_account
        - charge
        - customer_id
        - trans_type
      properties:
        TotalNumberOfAllocs:
          type: integer
          example: 0
          description: >-
            it's the number of sales invoices we want to allocate money to after
            create a new customer payment
        trans_type:
          type: integer
          example: 12
          description: 12 for customer payment make it static like that in the code
        bank_account:
          type: string
          example: '4'
          description: represent the into bank account in FA , 4 for cash on hand
        charge:
          type: string
          example: '200'
          description: >-
            represent the bank charge if exist , but take care bank charge and
            amount mustn't be the same
        amount:
          type: string
          example: '1000'
          description: represent the customer payment amount
        DateBanked:
          type: string
          format: date
          example: 2020/04/24
          description: represent the date of deposite
        customer_id:
          type: integer
          example: 161
          description: customer id that we craete the customer payment from
        memo_:
          type: string
          example: hi this is memo
          description: comment about the customer payment
        amount0:
          type: string
          example: '100'
          description: >-
            amount0 represent the first amount of the invoice we want to
            allocate the payment for , if TotalNumberOfAllocs = 4  , then we
            would have amout[0-3]
        un_allocated0:
          type: string
          example: '400'
          description: >-
            un_allocated0 represent the first un_allocated amount or the
            remaining of the invoice  we want to allocate the payment for , if
            TotalNumberOfAllocs = 4  , then we would have un_allocated[0-3] ,
            you must get this information from get sales invoice api before
            start to allocate
    AllocateCustomerPayment:
      type: object
      required:
        - DateBanked
        - TotalNumberOfAllocs
        - debtor_no
        - trans_no
        - trans_type
      properties:
        TotalNumberOfAllocs:
          type: integer
          example: 1
          description: >-
            it's the number of sales invoices we want to allocate money to after
            create a new customer payment
        trans_no:
          type: integer
          example: 904
          description: the payment we want to allocate amounts from
        trans_type:
          type: integer
          example: 12
          description: 12 for customer payment make it static like that in the code
        DateBanked:
          type: string
          format: date
          example: 2020/04/24
          description: represent the date of deposite
        debtor_no:
          type: integer
          example: 161
          description: customer id that we craete the customer payment from
        amount0:
          type: string
          example: '100'
          description: >-
            amount0 represent the first amount of the invoice we want to
            allocate the payment for , if TotalNumberOfAllocs = 4  , then we
            would have amout[0-3]
        un_allocated0:
          type: string
          example: '205'
          description: >-
            un_allocated0 represent the first un_allocated amount or the
            remaining of the invoice  we want to allocate the payment for , if
            TotalNumberOfAllocs = 4  , then we would have un_allocated[0-3] ,
            you must get this information from get sales invoice api before
            start to allocate
    Supplier:
      type: object
      required:
        - address
        - bank_account
        - curr_code
        - payment_terms
        - supp_address
        - supp_name
        - supp_ref
        - tax_group_id
        - tax_included
      properties:
        supp_name:
          type: string
          example: tmt supplier
        supp_ref:
          type: string
          example: tmt-sup-ref123
          description: supplier reference
        bank_account:
          type: string
          example: '4'
          description: supplier bank account , 4 for cash on hand
        payment_terms:
          type: string
          example: '4'
          description: payment term , whether it cash , on account , after 15 days
        curr_code:
          type: string
          example: USD
          description: Currency code for the supplier
        tax_group_id:
          type: string
          example: '1'
          description: tax group , is somehitng group taxes with similar attributes togther
        tax_included:
          type: string
          example: '0'
          description: tax included in invoices or not ?
        address:
          type: string
          example: 'tmt@tmt.com '
          description: mailing address of the supplier
        supp_address:
          type: string
          example: 6th street
          description: physical address of a supplier
        person_id:
          type: string
          example: '10'
          description: >-
            please provide it in case you want to update supplier only remove it
            from add new supplier
    Item:
      type: object
      required:
        - category_id
        - description
        - long_description
        - sales_prices
        - stock_id
      properties:
        stock_id:
          type: string
          example: '778958'
          description: represent the id of the item but it can be string
        description:
          type: string
          example: tmt-item-name
          description: name of the item
        long_description:
          type: string
          example: long description for item
          description: description for item
        category_id:
          type: integer
          example: 26
          description: item category for ex:(product , oil service ... )
        sales_prices:
          type: array
          description: Currency code for the supplier
          items:
            $ref: '#/components/schemas/SalesPricing'
    ItemMulti:
      type: array
      required:
        - category_id
        - description
        - long_description
        - sales_prices
        - stock_id
      items:
        properties:
          stock_id:
            type: string
            example: '778958'
            description: represent the id of the item but it can be string
          description:
            type: string
            example: tmt-item-name
            description: name of the item
          long_description:
            type: string
            example: long description for item
            description: description for item
          category_id:
            type: integer
            example: 26
            description: item category for ex:(product , oil service ... )
          sales_prices:
            type: array
            description: Currency code for the supplier
            items:
              $ref: '#/components/schemas/SalesPricing'
    ItemDetails:
      type: object
      properties:
        stock_id:
          type: string
          example: '778958'
          description: represent the id of the item but it can be string
        description:
          type: string
          example: tmt-item-name
          description: name of the item
        long_description:
          type: string
          example: long description for item
          description: description for item
        category_id:
          type: integer
          example: 26
          description: item category for ex:(product , oil service ... )
        tax_type_id:
          type: integer
          example: 1
        units:
          type: string
          example: 'each'
        mb_flag:
          type: string
          example: 'F'
        sales_account:
          type: integer
          example: 4123
        cogs_account:
          type: integer
          example: 6211
        inventory_account:
          type: integer
          example: 4123
        adjustment_account:
          type: integer
          example: 4123
        wip_account:
          type: integer
          example: 4123
        dimension_id:
          type: integer
          example: 0
        dimension2_id:
          type: integer
          example: 0
        purchase_cost:
          type: integer
          example: 1
        labour_cost:
          type: integer
          example: 1
        overhead_cost:
          type: integer
          example: 0
        inactive:
          type: integer
          example: 0
        no_sale:
          type: integer
          example: 1
        no_purchase:
          type: integer
          example: 1
        editable:
          type: integer
          example: 1
        depreciation_method:
          type: integer
          example: 1
        depreciation_rate:
          type: integer
          example: 1
        depreciation_factor:
          type: integer
          example: 1
        depreciation_start:
          type: string
          example: "0000-00-00"
        depreciation_date:
          type: string
          example: "0000-00-00"
        fa_class_id:
          type: integer
          example: 1
        tax_type_name:
          type: string
          example: "Standard Rated"
          
    UpdateItem:
      type: object
      properties:
        description:
          type: string
          example: tmt-item-name
          description: name of the item
        long_description:
          type: string
          example: long description for item
          description: description for item
        category_id:
          type: integer
          example: 26
          description: item category for ex:(product , oil service ... )
        sales_prices:
          type: array
          description: Currency code for the supplier
          items:
            $ref: '#/components/schemas/SalesPricing'
    UpdateMultiItem:
      type: array
      items:
        properties:
          description:
            type: string
            example: tmt-item-name
            description: name of the item
          long_description:
            type: string
            example: long description for item
            description: description for item
          category_id:
            type: integer
            example: 26
            description: item category for ex:(product , oil service ... )
          sales_prices:
            type: array
            description: Currency code for the supplier
            items:
              $ref: '#/components/schemas/SalesPricing'
    SalesPricing:
      type: object
      properties:
        price:
          type: string
          example: '100'
        curr_abrev:
          type: string
          example: AED
          description: currency of the sales pricing USD , AED ...etc
        sales_type_id:
          type: string
          example: '2'
          description: sales type ( price before/after tax )
      description: >-
        sales pricing represent the default price for the item depend on the
        sales type
    CreateSalesPricing:
      type: object
      required:
        - curr_abrev
        - sales_type_id
        - stock_id
      properties:
        price:
          type: string
          example: '100'
        stock_id:
          type: string
          example: '100'
        curr_abrev:
          type: string
          example: AED
          description: currency of the sales pricing USD , AED ...etc
        sales_type_id:
          type: string
          example: '2'
          description: sales type ( price before/after tax )
      description: >-
        sales pricing represent the default price for the item depend on the
        sales type
    UpdateSalesPricing:
      type: object
      properties:
        price:
          type: string
          example: '100'
        stock_id:
          type: string
          example: '100'
        curr_abrev:
          type: string
          example: AED
          description: currency of the sales pricing USD , AED ...etc
        sales_type_id:
          type: string
          example: '2'
          description: sales type ( price before/after tax )
      description: >-
        sales pricing represent the default price for the item depend on the
        sales type
    SalesInvoice:
      type: object
      required:
        - customer_id
        - invoice_date
        - items
        - payment
        - sales_type
      properties:
        invoice_date:
          type: string
          format: date
          example: 2020/01/09
          description: the invoice transaction date
        delivery_date:
          type: string
          format: date
          example: 2020/01/09
          description: >-
            the when the payment term not cash and will be due x days , a
            delivery date need to be specified
        customer_id:
          type: integer
          example: 161
          description: customer id
        deliver_to:
          type: string
          example: Abbas Ali
          description: >-
            customer name , or any kind of string specify who will accept the
            invoice
        ref:
          type: string
          example: ref-12399-2
          description: >-
            invoice reference must be unqiue reference each time we insert it ,
            it's not required if we did not pass it the invoice will generate a
            unique ref depend on FA pattern
        payment:
          type: integer
          example: 4
          description: payment terms , 4 for cash
        sales_type:
          type: integer
          example: 2
          description: price after/before tax
        frieght_cost:
          type: integer
          example: 100
          description: shipping charge cost
        items:
          type: array
          description: line items of the invoice
          items:
            $ref: '#/components/schemas/lineItems'
        disable_integration:
          type: boolean
          example: false
          description: >-
            disable integration with rms , if yes then the created invoice won't
            be created in rms
        cloud:
          $ref: '#/components/schemas/SalesInvoice_cloud'
      description: the sales invoice creation data
    SalesInvoiceDetails:
      type: object
      properties:
        trans_no:
          type: integer
          example: 649
          description: The Invoice Transaction Number
        type:
          type: integer
          example: 10
        version:
          type: integer
          example: 0
          description: customer id
        debtor_no:
          type: integer
          example: 10
        branch_code:
          type: integer
          example: 50
        tran_date:
          type: string
          format: date
          example: 2021-08-31
        due_date:
          type: string
          format: date
          example: 2021-08-31
        reference:
          type: string
          example: "341/2021"
          description: price after/before tax
        tpe:
          type: integer
          example: 100
          description: shipping charge cost
        line_items:
          type: array
          description: line items of the invoice
          items:
            $ref: '#/components/schemas/lineItems'
        order_:
          type: integer
          example: 680
        ov_amount:
          type: integer
          example: 1000
        ov_gst:
          type: integer
          example: 0
        ov_freight:
          type: integer
          example: 680
        ov_freight_tax:
          type: integer
          example: 0
        ov_discount:
          type: integer
          example: 0
        alloc:
          type: integer
          example: 0
        prep_amount:
          type: integer
          example: 0
        rate:
          type: integer
          example: 2
        ship_via:
          type: integer
          example: 0
        dimension_id:
          type: integer
          example: 0
        dimension2_id:
          type: integer
          example: 0
        payment_terms:
          type: integer
          example: 2
        tax_included:
          type: integer
          example: 0
        salesman_code:
          type: integer
          example: 0
        name:
          type: string
          example: "new one"
        debtor_ref:
          type: string
          example: "Reeef"
        address:
          type: string
          example: ""
        tax_id:
          type: integer
          example: 0
        curr_code:
          type: string
          example: "AED"
        sales_type:
          type: integer
          example: 2
        credit_status:
          type: integer
          example: 0
        pymt_discount:
          type: integer
          example: 0
        credit_limit:
          type: integer
          example: 0
        notes:
          type: string
          example: ""
        inactive:
          type: integer
          example: 0
        paid:
          type: string
          example: "AED"
        summary:
          type: integer
          example: 2
        onstanding:
          type: integer
          example: 1
        allocations:
          $ref: '#/components/schemas/Allocation'
        salesman:
          $ref: '#/components/schemas/Salesman'
        customer:
         $ref: '#/components/schemas/CustomerList'
  
    RoboSalesInvoice:
      type: object
      required:
        - cloud
        - customer_name
        - disable_integration
        - invoice_date
        - payment_term_text
      properties:
        invoice_date:
          type: string
          format: date
          example: 2020/01/09
          description: the invoice transaction date
        delivery_date:
          type: string
          format: date
          example: 2020/01/09
          description: >-
            the when the payment term not cash and will be due x days , a
            delivery date need to be specified
        customer_name:
          type: string
          example: Abbas
          description: >-
            customer name , the api will looking for someone has the same name
            and get it's id
        payment_term_text:
          type: string
          example: Cash
          description: >-
            text of the payment term , and the api map the payment term id to
            the invoice
        items:
          type: array
          description: line items of the invoice
          items:
            $ref: '#/components/schemas/lineItems'
        disable_integration:
          type: boolean
          example: false
          description: >-
            disable integration with rms is must here because we didn't want to
            create a new request in rms we call this api to append transactions
            to the request that processed by OCR
        cloud:
          $ref: '#/components/schemas/SalesInvoice_cloud'
      description: >-
        the aim of robo sales invoice is to provide information from a real
        invoice via OCR so we passing customer name , and paymet term as text
        and the api matching the ids
    lineItems:
      type: object
      required:
        - discount
        - price
        - quantity
        - stock_id
      properties:
        stock_id:
          type: string
          example: '1001'
          description: the id of the item
        quantity:
          type: integer
          example: 1
          description: qunatity of the sales item
        price:
          type: string
          example: '100'
          description: price of the item
        discount:
          type: string
          example: '100'
          description: discount of the item
      description: line items of the invoices or any transactions
    VoidTransaction:
      type: object
      required:
        - trans_no
        - type_no
      properties:
        trans_no:
          type: string
          example: '42'
          description: the transaction number of the target void transaction
        type_no:
          type: integer
          example: 0
          description: determine the type of the voided transaction
    isTransactionVoided:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/VoidTransaction'
    SalesOrder:
      type: object
      required:
        - cust_ref
        - customer_id
        - delivery_date
        - items
        - order_date
        - payment
        - sales_type
      properties:
        order_date:
          type: string
          format: date
          example: 2020/01/09
          description: the sales order date
        delivery_date:
          type: string
          format: date
          example: 2020/01/09
          description: >-
            the when the payment term not cash and will be due x days , a
            delivery date need to be specified
        customer_id:
          type: integer
          example: 161
          description: customer id
        deliver_to:
          type: string
          example: Abbas Ali
          description: >-
            customer name , or any kind of string specify who will accept the
            invoice
        cust_ref:
          type: string
          example: general customer
          description: customer reference , or it's unqiue name
        ref:
          type: string
          example: ref-12399-2
          description: >-
            invoice reference must be unqiue reference each time we insert it ,
            it's not required if we did not pass it the invoice will generate a
            unique ref depend on FA pattern
        payment:
          type: integer
          example: 4
          description: payment terms , 4 for cash
        sales_type:
          type: integer
          example: 2
          description: price after/before tax
        frieght_cost:
          type: integer
          example: 100
          description: shipping charge cost
        items:
          type: array
          description: line items of the invoice
          items:
            $ref: '#/components/schemas/lineItems'
      description: the sales invoice creation data
    UpdateSalesOrder:
      type: object
      properties:
        order_date:
          type: string
          format: date
          example: 2020/01/09
          description: the sales order date
        delivery_date:
          type: string
          format: date
          example: 2020/01/09
          description: >-
            the when the payment term not cash and will be due x days , a
            delivery date need to be specified
        customer_id:
          type: integer
          example: 161
          description: customer id
        deliver_to:
          type: string
          example: Abbas Ali
          description: >-
            customer name , or any kind of string specify who will accept the
            invoice
        cust_ref:
          type: string
          example: general customer
          description: customer reference , or it's unqiue name
        ref:
          type: string
          example: ref-12399-2
          description: >-
            invoice reference must be unqiue reference each time we insert it ,
            it's not required if we did not pass it the invoice will generate a
            unique ref depend on FA pattern
        payment:
          type: integer
          example: 4
          description: payment terms , 4 for cash
        sales_type:
          type: integer
          example: 2
          description: price after/before tax
        frieght_cost:
          type: integer
          example: 100
          description: shipping charge cost
        items:
          type: array
          description: line items of the invoice
          items:
            $ref: '#/components/schemas/lineItems'
      description: the sales invoice creation data
    UpdatePWPRequests:
      type: object
      required:
        - request_no
      properties:
        request_no:
          type: integer
          example: 123
          description: the rms request no , the new  value in request_no column
      description: update the pwp request fields
    NonGLModuleType:
      type: object
      properties:
        type:
          type: integer
          example: 30
          description: transaction type , 30 stands for sales order
      description: add new trans type body in non gl moodule file
    Salesman:
      type: object
      required:
        - salesman_name
      properties:
        salesman_name:
          type: string
          example: TMT SALESPERSON
          description: the name of the saleman
        provision:
          type: integer
          example: 0
        provision2:
          type: integer
          example: 0
        break_pt:
          type: integer
          example: 0
        salesman_phone:
          type: string
          example: '10926'
          description: the phone number of the saleman
        salesman_email:
          type: string
          example: TMT@SALESPERSON.com
          description: the email of the saleman
        salesman_fax:
          type: string
          example: TMT FAX
          description: the fax of the saleman
      description: add new salesman data
    UpdateSalesman:
      type: object
      properties:
        salesman_name:
          type: string
          example: TMT SALESPERSON
          description: the name of the saleman
        provision:
          type: integer
          example: 0
        provision2:
          type: integer
          example: 0
        break_pt:
          type: integer
          example: 0
        salesman_phone:
          type: string
          example: '10926'
          description: the phone number of the saleman
        salesman_email:
          type: string
          example: TMT@SALESPERSON.com
          description: the email of the saleman
        salesman_fax:
          type: string
          example: TMT FAX
          description: the fax of the saleman
      description: add new salesman data
    CreditThis:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/lineItems'
      description: array of items to credit them
    User:
      type: object
      required:
        - showSql
        - users
      properties:
        bypass_companies:
          type: array
          items:
            $ref: '#/components/schemas/UserArray'
        users:
          type: array
          items:
            type: string
            example: ''
            description: company prefixes we need to skip in our iteration
        showSql:
          type: boolean
          example: false
          description: >-
            this param indicate whether we want to only produce a sql , or we
            want to execute them also
      description: show sql param for debugging , and array of users we want to create
    Purchase:
      type: object
      required:
        - OrderDate
        - cash_account
        - due_date
        - line_items
      properties:
        OrderDate:
          type: string
          format: date
          example: 2020/02/24
          description: invoice date
        due_date:
          type: string
          format: date
          example: 2020/02/24
          description: invoice due date
        cash_account:
          type: string
          example: ''
          description: Payment of the invoice , empty means it's delayed
        cash_account_name:
          type: string
          example: petty cash
          description: >-
            cash account name used with robo accountant , when we pass this
            variable then we don't have to pass cash_account id , becasue this
            variable search for all cash accounts and get the one who match this
            name
        supplier_name:
          type: string
          example: tmt
          description: >-
            looking for the supplier in the db , if it's not exist then create
            it with payment_term_name and default company currency variable
            passed also
        supplier_id:
          type: integer
          example: 1
          description: >-
            supplier id passed  , when this variable specified the supplier_name
            ignored and payment_term_name
        payment_term_name:
          type: string
          example: Cash
          description: payment term name used in create new supplier within this api
        supp_ref:
          type: string
          example: asd2ed
          description: >-
            supplier reference must be unique and it's not required , it's
            created automatically if it's not provided
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/lineItems'
        cloud:
          $ref: '#/components/schemas/Purchase_cloud'
      description: create new supplier invoice
    UserArray:
      type: object
      required:
        - email
        - password
        - role
        - username
      properties:
        username:
          type: string
          example: abdallah.ismail@cyberaccounting.ae
          description: username is unique and user use it to login
        email:
          type: string
          example: abdallah.ismail@cyberaccounting.ae
          description: email of the user but not used in login
        password:
          type: string
          example: m3M2RfWc_D
          description: password here will be string but fa will change it to md5 encryption
        role:
          type: string
          example: checker
          description: >-
            role of the user , role is very tricky we insert here the role name
            and we LIKE it witht he role name in the database , if we didn't
            find the role in the current company iteration we get it from the
            template that the current company created from , if we didn't find
            it we don't create the user at all
    SalesInvoice_cloud:
      type: object
      required:
        - item_no
        - request_no
        - trans_type
      properties:
        request_no:
          type: integer
          example: 1620
          description: rms request no that we want to integrate with
        item_no:
          type: integer
          example: 1649
          description: rms item no that we want to integrate with
        trans_type:
          type: integer
          example: 10
          description: represent the type of transaction we want to integrate
      description: >-
        cloud object represent the integration of invoice to an existing rms
        request and item , but disable_integration above if it's 0 then the
        invoice will create a request from scratch and append the invoice in it
        , so if we will use cloud make sure disable_integration = 1
    Purchase_cloud:
      type: object
      required:
        - item_no
        - request_no
        - trans_type
      properties:
        request_no:
          type: integer
          example: 1730
          description: the rms reuqest no we want to integrate with
        item_no:
          type: integer
          example: 1762
          description: the rms item no we want to integrate with
        trans_type:
          type: integer
          example: 20
          description: trans_type here must be 20 as it's represent he supplier invoice
    SalesTypes:
      type: object
      properties:
        id:
          type: integer
          example: 2
          description: sales type id
        sales_type:
          type: string
          example: Price After Tax
        factor:
          type: integer
          example: 1
        inactive:
          type: integer
          example: 0
        selected:
          type: integer
          example: 0
    FiscalYear:
      type: object
      properties:
        id:
          type: integer
          example: 2
          description: fiscal year id
        begin:
          type: string
          example: '2018-01-01'
        end:
          type: string
          example: '2018-12-31'
        closed:
          type: integer
          example: 0
    CompanyUpdateMultiInvoiceState:
      type: array
      items:
        example: '1_'
    CompanyReminderSettings:
      type: object
      properties:
          reminder_active:
            type: integer
            example: 1
            enum: [1,2]
            description: Reminder active state, 1 for active , 0 for not active
          reminder_hour:
            type: integer
            example: 12
            minimum: 0
            maximum: 24
          reminder_first_due_date:
            type: string
            example: '2018-12-31'
          reminder_second_due_date:
            type: integer
            example: '2018-12-31'
    CustomerList:
      type: object
      properties:
          id:
            type: integer
            example: 6
          person_id:
            type: integer
            example: 6
          type:
            type: string
            example: 'customer'
          action:
            type: string
            example: 'general'
          entity_id:
            type: integer
            example: 4
          debtor_no:
            type: integer
            example: 4
          name:
            type: string
            example: 'Name'
          debtor_ref:
            type: string
            example: 'USD Customer'
          address:
            type: string
            example: '6th address example'
          tax_id:
            type: integer
            example: 4
          curr_code:
            type: string
            example: "USD"
          sales_type:
            type: integer
            example: 1
          dimension_id:
            type: integer
            example: 1
          dimension2_id:
            type: integer
            example: 2
          credit_status:
            type: integer
            example: 1
          payment_terms:
            type: integer
            example: 4
          discount:
            type: integer
            example: 0
          pymt_discount:
            type: integer
            example: 0
          credit_limit:
            type: integer
            example: 1000
          notes:
            type: string
            example: 'Notes Test'
          inactive:
            type: integer
            example: 1
          ref:
            type: string
            example: "USD Customer"
          name2:
            type: string
            example: ''
          phone:
            type: string
            example: '011248478483'
          phone2:
            type: string
            example: ''
          fax:
            type: string
            example: ''
          email:
            type: string
            example: 'mcledger@mcledger.com'
          lang:
            type: string
            example: ''
          hasTransactions:
            type: string
            example: true
          current:
            type: integer
            example: 0
          balance:
            type: integer
            example: 0
          branches:
            $ref: '#/components/schemas/Branch'
    Branch:
      type: object
      properties:
          branch_code:
            type: integer
            example: 6
          debtor_no:
            type: integer
            example: 6
          br_name:
            type: string
            example: 'branch name'
          branch_ref:
            type: string
            example: 'branch ref'
          br_address:
            type: string
            example: 'address'
          area:
            type: integer
            example: 4
          salesman:
            type: integer
            example: 1
          default_location:
            type: string
            example: 'Def Location'
          tax_group_id:
            type: integer
            example: 1
          sales_account:
            type: integer
            example: 4123
          sales_discount_account:
            type: integer
            example: 1231
          receivables_account:
            type: integer
            example: 1221
          payment_discount_account:
            type: integer
            example: 12311
          default_ship_via:
            type: integer
            example: 2
          br_post_address:
            type: string
            example: 'address post'
          group_no:
            type: integer
            example: 0
          notes:
            type: string
            example: ''
          bank_account:
            type: integer
            example: 2929
          inactive:
            type: integer
            example: 0
          tax_sub_location_id:
            type: integer
            example: 0
          trn:
            type: string
            example: ''
          excise_trn:
            type: string
            example: ""
          tax_groups:
            type: array
            items:
              $ref: '#/components/schemas/TaxGroup'
    TaxGroup:
      type: object
      properties:
          id:
            type: integer
            example: 6
          rate:
            type: integer
            example: 5
          sales_gl_code:
            type: integer
            example: 2171
          purchasing_gl_code:
            type: integer
            example: 2171
          name:
            type: string
            example: 'standard rate'
          inactive:
            type: integer
            example: 0
          tax_category_id:
            type: integer
            example: 1
          description:
            type: string
            example: ''
          tax_code:
            type: integer
            example: 1
          tax_code_description:
            type: string
            example: ''
          tax_shipping:
            type: integer
            example: 0
    Allocation:
      type: object
      properties:
        type:
          type: integer
          example: 10
          description: Type of transaction, for example 10 for sales invoice
        trans_no:
          type: integer
          example: 54
        branch_code:
          type: integer
          example: 2
        reference:
          type: string
          example: '042/2019'
        tran_date:
          type: string
          example: '2019-12-31'
        DebtorName:
          type: string
          example: "John"
        debtor_ref:
          type: string
          example: 'john ref'        
        curr_code:
          type: string
          example: 'AED'
        Total:
          type: number
          example: 11.55
          description: Total amount of payment
        alloc:
          type: number
          example: 11.5
          description: Allocated amount from the payment 
        due_date:
          type: string
          example: '2020-10-10'
        address:
          type: string
          example: ''
        settled:
          type: integer
          example: 1
        debtor_no:
          type: integer
          example: 2
        rate:
          type: integer
          example: 5
    RefundCustomerPayment:
      type: object
      required:
        - bank_account
        - reund_date
      properties:
        bank_account:
          type: integer
          example: 1231
          description: Refund Bank Account
        refund_date:
          type: integer
          example: "2019-06-03"
          description: Refund date
    ItemTaxType:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Id of the item tax type
        name:
          type: string
          example: "Standard Rated"
        exempt:
          type: integer
          example: 0
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/TaxType'

    TaxType:
      type: object
      properties:
        name:
          type: string
          example: Standard Rated
        tax_type_id:
          type: integer
          example: 1
        rate:
          type: integer
          example: 5
          
    BankAccount:
      type: object
      properties:
        id:
          type: integer
          example: 11
        account_type:
          type: integer
          example: 0
        account_code:
          type: integer
          example: 5293
        bank_account_name:
          type: string
          example: "ABCB Credit Card"
        bank_name:
          type: string
          example: "ADCB"
        bank_account_number:
          type: string
          example: "xxxx2232"
        bank_curr_code:
          type: string
          example: "USD"
        bank_address:
          type: string
          example: "Dubai"
        dflt_curr_act:
          type: integer
          example: 1
    SalesKit:
        type: object
        required:
          - kit_code
          - description
          - category
          - components
        properties:
          kit_code:
            type: string
            example: "TMT"
          description:
            type: string
            example: ''
          category:
            type: string
            example: 56
          components:
            type: array
            items:
              properties:
                code:
                  example: 00037
                quanitiy:
                  example: 2

responses:
  403:
    description: Forbidden.
    content:
      application/json:
        schema:
          $ref: '#/definitions/AuthError'
  ERPTemplates:
      type: array
      items:
        example: en_Standard_BKK_564.sql
  InvoiceAppState:
    type: object
    properties:
      enabled:
        type: integer
        example: 1
        description: 1 for enabled , 0 for disabled
  UpdateCompany:
    type: object
    properties:
      message:
        type: string
        example: Company setup has been updated, logo updated
        description: The successfull message after update completed.
      data:
        type: array
        items:
          properties:
            inv_template_id:
              type: string
              example: 2
            inv_color_id:
              type: string
              example: '#fffff'
  AllCompanies:
    type: object
    properties:
      message:
        type: string
        example: all companies returned successfully!
      data:
        type: array
        items:
          properties:
            name:
              type: string
              example: mcledger-example
            tbpref:
              type: string
              example: '1_'
  CompanyUpdateMultiInvoiceState:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            1_:
              type: integer
              example: 1
              description: 1 for success , 0 for fail
  CompanyInvalidReference:
    type: object
    properties:
      message:
        type: string
        example: The entered reference is invalid.
      data:
        type: string
        example: []
  CompanyValidReference:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            valid:
              type: string
              example: true
              description: The reference true or false  represent valid or not valid.
  InvoiceReminderNotActive:
    type: object
    properties:
      code:
        type: integer
        example: 400
      message:
        type: string
        example: "Company has not activated this extension yet"
      data:
        type: string
        example: []
  InvoiceReminderSettings:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            success:
              type: string
              example: true
              description: The success true or false  represent updated or not.
  CustomersList:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/CustomerList'

  ShowCustomer:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        $ref: '#/components/schemas/CustomerList'
  CreateCustomer:
    type: object
    properties:
      message:
        type: string
        example: "Customer Created Successfully"
      data:
        $ref: '#/components/schemas/CustomerList'
  FailedCreateCustomer:
    type: object
    properties:
      message:
        type: string
        example: "name is required [name]"
      data:
        example: []
  CustomerInvoices:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        $ref: '#/components/schemas/SalesInvoice'
  CustomerNames:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            list:
              type: array
              items:
                properties:
                  debtor_no:
                    type: integer
                    example: 1
                    description: Customer Id 
                  name:
                    type: string
                    example: 'Talaat Example'
                    description: Customer Name 
                  debtor_ref:
                    type: string
                    example: 'Reference'
                    description: Customer Reference
  CreateMultiCustomer:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            debtor_no:
              type: integer
              example: 201
              description: Customer Created Id 
            debtor_ref:
              type: string
              example: '82828jfj3783SS'
              description: Shopify ID as customer reference
  CustomerPayments:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Allocation'
            properties:
              salesman:
                $ref: '#/components/schemas/Salesman'
              customer:
                $ref: '#/components/schemas/CustomerList'
  CustomerPaymentsDetails:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Allocation'
            properties:
              salesman:
                $ref: '#/components/schemas/Salesman'
              customer:
                $ref: '#/components/schemas/CustomerList'
              allocations:
                type: array
                items:
                  $ref: '#/components/schemas/Allocation'
  CustomerPaymentsReference:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
          type: object
          properties:
            ref:
              type: string
              example : "001/2021"
  FailedCustomerPayment:
    type: object
    properties:
      message:
        type: string
        example: "The entered date is out of fiscal year or is closed for further data entry."
      data:
        type: string
        example: []

  CreateCustomerPayments:
    type: object
    properties:
      message:
        type: string
        example: "Customer Payment Created Successfully!"
      data:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Allocation'
            properties:
              salesman:
                $ref: '#/components/schemas/Salesman'
              customer:
                $ref: '#/components/schemas/CustomerList'
              allocations:
                type: array
                items:
                  $ref: '#/components/schemas/Allocation'
  AllocateCustomerPayment:
    type: object
    properties:
      message:
        type: string
        example: "Allocated Successfully"
      data:
        $ref: '#/components/schemas/AllocateCustomerPayment'

  RefundCustomerPayment:
    type: object
    properties:
      message:
        type: string
        example: "Customer payment refunded successfully"
      data:
        type: object
  SuppliersList:
    type: object
    properties:
      message:
        type: string
        example: "Customer payment refunded successfully"
      data:
        type: array
        items:
          $ref: '#/components/schemas/Supplier'
            
  ItemsList:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            list:
              type: array
              items:
                allOf:
                - $ref: '#/components/schemas/SalesPricing'
                - $ref: '#/components/schemas/ItemDetails'
  FailedCreateItem:
    type: object
    properties:
      message:
        type: string
        example: "The entered information is a duplicate. Please go back and enter different values."
      data:
        type: string
        example: []
  CreateItems:
    type: object
    properties:
      message:
        type: string
        example: "Item  Tmsks21  Created Successfully  & Sales Pricing Created Successfully"
      data:
        $ref: '#/components/schemas/ItemDetails'
  ItemTaxTypes:
    type: object
    properties:
      message:
        type: string
        example: "Item  Tmsks21  Created Successfully  & Sales Pricing Created Successfully"
      data:
        type: array
        items:
          $ref: '#/components/schemas/ItemTaxType'
  Logs:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            list:
              type: array
              items:
                properties:
                  id:
                    type: integer
                    example: 1
                  user_id:
                    type: integer
                    example: 39
                  user_email:
                    type: string
                    example: "mcledger@mcledger.com"
                  trans_type:
                    type: integer
                    example: 0
                  trans_no:
                    type: integer
                    example: 299
                  module:
                    type: string
                    example: 'Items'
                  action:
                    type: string
                    example: "PUT"
                  message:
                    type: string
                    example: Invalid Stock Id
                  source:
                    type: string
                    example: "API"
                  url:
                    type: string
                    example: "/inventory/TMT1997"
                  attempt:
                    type: integer
                    example: 0
                  action_timestamp:
                    type: string
                    example: "2021-09-08 07:54:15"
                  type:
                    type: string
                    example: null
                  reference:
                    type: string
                    example: null
  SalesInvoiceList:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/SalesInvoiceDetails'
  Void:
    type: object
    properties:
      message:
        type: string
        example: "Transaction Voided Successfully."
      data:
        type: string
        example: []
  Dashboard:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            top_customers:
              type: array
              items:
                properties:
                  total:
                    type: number
                    example: 142329.00
                  debtor_no:
                    type: number
                    example: 3
                  name:
                    type: string
                    example: "test11 12"
                  debtor_ref:
                    type: string
                    example: "Test 1"
            top_stock:
              type: array
              items:
                properties:
                  total:
                    type: number
                    example: 142329.00
                  stock_id:
                    type: string
                    example: "T1123"
                  description:
                    type: string
                    example: "Seka Item"
                  qty:
                    type: integer
                    example: 290
                  costs:
                    type: integer
                    example: 0
            top_salesman:
              type: array
              items:
                properties:
                  total:
                    type: number
                    example: 142329.00
                  salesman_code:
                    type: string
                    example: "T1123"
                  name:
                    type: string
                    example: "Seka Item"
            total_receipts:
              type: array
              items:
                properties:
                  count_settled:
                    type: integer
                    example: 442
                  count:
                    type: integer
                    example: 29
            total_overdue_inv:
              type: array
              items:
                properties:
                  count:
                    type: integer
                    example: 29
            total_unpaid_invoices:
              type: array
              items:
                properties:
                  count:
                    type: integer
                    example: 29
            total_sales:
              type: array
              items:
                properties:
                  total:
                    type: integer
                    example: 555.2
                  count:
                    type: integer
                    example: 29
            total_customers:
              type: array
              items:
                properties:
                  count:
                    type: integer
                    example: 29
  Generalsettings:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            categories:
              type: array
              items:
                properties:
                  category_id:
                    type: number
                    example: 28
                  description:
                    type: string
                    example: 'Expenses'
                  saleable:
                    type: boolean
                    example: true
                  tax_type_id:
                    type: integer
                    example: 3
            tax_types:
              type: array
              items:
                $ref: '#/components/schemas/TaxType'
            item_tax_types:
              type: array
              items:
                 $ref: '#/components/schemas/ItemTaxType'

            tax_groups:
              type: array
              items:
                 $ref: '#/components/schemas/TaxGroup'
            units:
              type: array
              items:
                properties:
                  abbr:
                    type: string
                    example: "each"
                  name:
                    type: string
                    example: "Each"
                  decimals:
                    type: integer
                    example: "0"
            item_types:
              type: array
              items:
                properties:
                  id:
                    type: string
                    example: "M"
                  name:
                    type: string
                    example: "Manufactured"
            invoices_reminder:
              type: string
              example : []
            fiscal_years:
              type: array
              items:
                 $ref: '#/components/schemas/FiscalYear'
            stripe_integration_status:
              type: boolean
              example: false
  PWPRequests:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: string
        example: []
  UpdatePWPRequests:
    type: object
    properties:
      message:
        type: string
        example: "Updated Successfully"
      data:
        type: string
        example: []
  SalesPricing:
    type: object
    properties:
      message:
        type: string
        example: "Sales Pricing Added Successfully"
      data:
        type: string
        example: []
  UpdateSalesPricing:
    type: object
    properties:
      message:
        type: string
        example: "Sales Pricing Updated Successfully"
      data:
        type: string
        example: []
  DeleteSalesOrder:
    type: object
    properties:
      message:
        type: string
        example: "Sales Order Deleted Successfully"
      data:
        type: string
        example: []
  InvoiceSalesOrder:
    type: object
    properties:
      message:
        type: string
        example: "Sales Order Invoicied Successfully"
      data:
        type: string
        example: []
  VatReturnReport:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: array
        items:
          properties:
            basic_report:
              type: array
              items:
                properties:
                  tax_rate:
                    type: string
                    example: "Standard Rated 5%"
                  output:
                    type: integer
                    example: 39
                  output_tax:
                    type: integer
                    example: 28282
                  input:
                    type: number
                    example: -50
                  input_tax:
                    type: integer
                    example: 299
                  net_tax:
                    type: integer
            total_payable:
              type: number
              example: 2031.18
            report:
              type: array
              items:
                properties:
                  tax_name:
                    type: string
                    example: "Standard Rated 5%"
                  id:
                    type: integer
                    example: 39
                  trans_type:
                    type: integer
                    example: 28282
                  trans_no:
                    type: number
                    example: -50
                  tran_date:
                    type: string
                    format: date
                    example: "2019-12-04"
                  tax_type_id:
                    type: integer
                    example: 1
                  ex_rate:
                    type: integer
                    example: 4
                  included_in_price:
                    type: integer
                    example: 1
                  net_amount:
                    type: number
                    example: -15
                  memo:
                    type: string
                    example: null
                  reg_type:
                    type: string
                    example: null
                  name:
                    type: string
                    example: null
                  gst_no:
                    type: string
                    example: null
                  br_name:
                    type: string
                    example: null
                  request_no:
                    type: integer
                    example: 2929
                  item_no:
                    type: integer
                    example: 2929
                  type_name:
                    type: string
                    example: "Journal Entry"
                  ref:
                    type: string
                    example: "Referemn"
  TotalPaidReport:
    type: object
    properties:
      message:
        type: string
        example: ""
      data:
        type: object
        properties:
          total_paid_sales:
            example: 0
          total_unpaid_sales:
            example: 0
          accounts:
            example: []
  Modules:
    type: object
    properties:
      message:
        example: ""
      data:
        type: array
        items:
          properties:
            name:
              example: "journal"
            code:
              example: 0
            url:
              example: "gl/gl.com"
            edit_url:
              example: null
  AddNonGlModule:
    type: object
    properties:
      message:
        example: "Added Successfully."
      data:
        example: []
  DeleteNonGlModule:
    type: object
    properties:
      message:
        example: "Deleted Successfully."
      data:
        example: []
  CreateSalesman:
    type: object
    properties:
      message:
        example: "Created Successfully."
      data:
        example: []
  UpdateSalesman:
    type: object
    properties:
      message:
        example: "Updated Successfully."
      data:
        example: []
  Salesman:
    type: object
    properties:
      message:
        example: ""
      data:
        type: object
        properties:
          list:
            type: array
            items:
              $ref: '#/components/schemas/Salesman'
  SalesmanDetails:
    type: object
    properties:
      message:
        example: ""
      data:
        $ref: '#/components/schemas/Salesman'
        
  CreatePurchase:
    type: object
    properties:
      message:
        example: "Created Successfully."
      data:
        example: []
  PurchaseList:
    type: object
    properties:
      message:
        example: ""
      data:
        type: object
        properties:
          list:
            type: array
            items:
              $ref: '#/components/schemas/Purchase'
  PurchaseDetails:
    type: object
    properties:
      message:
        example: ""
      data:
        $ref: '#/components/schemas/Purchase'
  BankAccounts:
    type: object
    properties:
      message:
        example: ""
      data:
        type: array
        items:
          $ref: '#/components/schemas/BankAccount'
          
  CreateSalesKit:
    type: object
    properties:
      message:
        example: "Created Successfully."
      data:
        example: []
  UpdateSalesKit:
    type: object
    properties:
      message:
        example: "Updated Successfully."
      data:
        example: []
  OnlineCurrencyRate:
    type: object
    properties:
      message:
        example: ""
      data:
        type: object
        properties:
          rate:
            example: 2.5

definitions:
  AuthError:
    type: object
    required:
      - message
    properties:
      code:
       type: integer
       example: 403
      message:
        type: string
        example: 'Invalid Email Or Password'
        description: 'Unauthorized request'
      data:
        type: any
        example : []
  ErrorCreateCompany:
    type: object
    required:
      - message
    properties:
      code:
       type: integer
       example: 412
      message:
        type: string
        example: 'name of the company is required'
      data:
        type: any
        example : []